<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Study</title>
  
  <subtitle>好好学习，天天向上！</subtitle>
  <link href="https://linqiankun.github.io/hexoblog/atom.xml" rel="self"/>
  
  <link href="https://linqiankun.github.io/hexoblog/"/>
  <updated>2023-07-27T03:33:04.796Z</updated>
  <id>https://linqiankun.github.io/hexoblog/</id>
  
  <author>
    <name>九分石人</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TODO</title>
    <link href="https://linqiankun.github.io/hexoblog/TODO/"/>
    <id>https://linqiankun.github.io/hexoblog/TODO/</id>
    <published>2099-12-31T15:59:59.000Z</published>
    <updated>2023-07-27T03:33:04.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><span id="more"></span><h2 id="QUEST-TODO"><a href="#QUEST-TODO" class="headerlink" title="QUEST_TODO"></a>QUEST_TODO</h2><ul><li><input disabled="" type="checkbox"> zk同时接收到创建节点请求</li><li><input disabled="" type="checkbox"> mysql分库分表</li></ul><h2 id="POSTS-TODO"><a href="#POSTS-TODO" class="headerlink" title="POSTS_TODO"></a>POSTS_TODO</h2><ul><li><input disabled="" type="checkbox"> rocketmq负载均衡代码</li><li><input disabled="" type="checkbox"> rocketmq消息可靠性消费重试代码</li><li><input disabled="" type="checkbox"> jekins安装和使用<ul><li><input disabled="" type="checkbox"> jekins安装过程</li><li><input disabled="" type="checkbox"> jekins基本使用</li></ul></li><li><input disabled="" type="checkbox"> B+树</li><li><input disabled="" type="checkbox"> deepin安装docker</li><li><input disabled="" type="checkbox"> jvm命令</li><li><input disabled="" type="checkbox"> jvm调优</li><li><input disabled="" type="checkbox"> SpringBean的初始化过程</li><li><input disabled="" type="checkbox"> SpringBean的生命周期</li><li><input disabled="" type="checkbox"> redis底层的8种数据结构</li></ul><h2 id="面经-TODO"><a href="#面经-TODO" class="headerlink" title="面经_TODO"></a>面经_TODO</h2><ul><li><input disabled="" type="checkbox"> 雪球科技一面面经</li><li><input disabled="" type="checkbox"> 雪球科技二面面经</li><li><input disabled="" type="checkbox"> 网易一面面经</li><li><input disabled="" type="checkbox"> 信也科技一面面经</li><li><input disabled="" type="checkbox"> 禾连科技一面面经</li><li><input disabled="" type="checkbox"> 海康威视一面面经</li><li><input disabled="" type="checkbox"> 同花顺一面面经</li></ul><h2 id="DRAFTS-TODO"><a href="#DRAFTS-TODO" class="headerlink" title="DRAFTS_TODO"></a>DRAFTS_TODO</h2><ul><li><input disabled="" type="checkbox"> AIO</li><li><input disabled="" type="checkbox"> kafka简介</li><li><input disabled="" type="checkbox"> rocketmq-Broker启动流程</li><li><input disabled="" type="checkbox"> B+树</li></ul><h2 id="OTHER-TODO"><a href="#OTHER-TODO" class="headerlink" title="OTHER_TODO"></a>OTHER_TODO</h2><ul><li><input disabled="" type="checkbox"> shiro</li><li><input disabled="" type="checkbox"> mq消费失败处理</li><li><input disabled="" type="checkbox"> 单例模式</li><li><input disabled="" type="checkbox"> 腾讯烧香问题</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;TODO&quot;&gt;&lt;a href=&quot;#TODO&quot; class=&quot;headerlink&quot; title=&quot;TODO&quot;&gt;&lt;/a&gt;TODO&lt;/h1&gt;</summary>
    
    
    
    <category term="todo" scheme="https://linqiankun.github.io/hexoblog/categories/todo/"/>
    
    
    <category term="todo" scheme="https://linqiankun.github.io/hexoblog/tags/todo/"/>
    
  </entry>
  
  <entry>
    <title>外包公司大汇总</title>
    <link href="https://linqiankun.github.io/hexoblog/%E5%A4%96%E5%8C%85%E5%85%AC%E5%8F%B8%E5%A4%A7%E6%B1%87%E6%80%BB/"/>
    <id>https://linqiankun.github.io/hexoblog/%E5%A4%96%E5%8C%85%E5%85%AC%E5%8F%B8%E5%A4%A7%E6%B1%87%E6%80%BB/</id>
    <published>2099-12-31T15:59:58.000Z</published>
    <updated>2023-07-27T03:33:00.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="外包公司汇总"><a href="#外包公司汇总" class="headerlink" title="外包公司汇总"></a>外包公司汇总</h1><span id="more"></span><ol><li>德科（华为）</li><li>捷程易信（网易）</li><li>恒生（阿里）</li><li><em>乌鸠科技</em>（阿里）</li><li><em>端点</em>（阿里）</li><li>博彦科技</li><li>科蓝软件</li><li>奥解思</li><li>法本</li><li>广讯通信</li><li>京北方</li><li>汉克时代</li><li>华钦软件CLPS</li><li>长亮科技（银行）</li><li>信雅达科技</li><li>网达软件（咪咕）</li><li>神州信息（银行）</li><li>宇信科技（银行）</li><li>宁波易简电子科技（银行）</li><li>安硕信息技术</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;外包公司汇总&quot;&gt;&lt;a href=&quot;#外包公司汇总&quot; class=&quot;headerlink&quot; title=&quot;外包公司汇总&quot;&gt;&lt;/a&gt;外包公司汇总&lt;/h1&gt;</summary>
    
    
    
    <category term="todo" scheme="https://linqiankun.github.io/hexoblog/categories/todo/"/>
    
    
    <category term="todo" scheme="https://linqiankun.github.io/hexoblog/tags/todo/"/>
    
  </entry>
  
  <entry>
    <title>python将sql导出为md</title>
    <link href="https://linqiankun.github.io/hexoblog/md/python/python%E5%B0%86sql%E5%AF%BC%E5%87%BA%E4%B8%BAmd/"/>
    <id>https://linqiankun.github.io/hexoblog/md/python/python%E5%B0%86sql%E5%AF%BC%E5%87%BA%E4%B8%BAmd/</id>
    <published>2023-07-27T05:58:34.000Z</published>
    <updated>2023-07-27T06:09:27.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-将-sql-导出为-md"><a href="#python-将-sql-导出为-md" class="headerlink" title="python 将 sql 导出为 md"></a>python 将 sql 导出为 md</h1><span id="more"></span><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>python38</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>建造 python 项目，或者 git 克隆<a href="https://github.com/2liang/AutoBuildDocFromDB.git">AutoBuildDocFromDB</a><blockquote><p>克隆代码需要修改，读取写入文件编码方式</p></blockquote></li><li>在项目目录下运行:<code>python build.py sql_dir</code>其中 sql_dir 为您的 sql 文件路径。</li><li>生成成功的 md 文件，在项目的 md 文件夹中，文件名同您的 sql 文件名。</li></ol><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://gitee.com/linqiankun/picurl/raw/master/java/20211029144430.png" alt="项目结构"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author : 我才是二亮 (unstring@163.com)</span></span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> error</span><br><span class="line"><span class="keyword">import</span> sys, os.path</span><br><span class="line"><span class="keyword">from</span> FileParserClass <span class="keyword">import</span> FileParser</span><br><span class="line"><span class="keyword">from</span> MarkdownBuildClass <span class="keyword">import</span> MarkDownBuild</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    md_dir = <span class="string">&#x27;./md/&#x27;</span></span><br><span class="line"></span><br><span class="line">    content = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    file = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(sys.argv) &lt; <span class="number">2</span>):</span><br><span class="line">        exit(<span class="string">&#x27;请输入SQL文件路径&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dir</span> = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        file = <span class="built_in">open</span>(<span class="built_in">dir</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">dir</span>)</span><br><span class="line">    <span class="keyword">except</span> error:</span><br><span class="line">        exit(error)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        content = file.read()</span><br><span class="line">    <span class="keyword">except</span> error:</span><br><span class="line">        exit(error)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        file.close()</span><br><span class="line"></span><br><span class="line">    file_parser = FileParser()</span><br><span class="line">    <span class="comment"># 将文件分离为每张表</span></span><br><span class="line">    table_list = file_parser.separatTable(content)</span><br><span class="line">    <span class="comment"># 解析出表中表名及表详情</span></span><br><span class="line">    table_name = file_parser.parserTableName(table_list)</span><br><span class="line">    <span class="comment"># 解析出每张表字段情况并与表名表详情组合</span></span><br><span class="line">    table_data = file_parser.parserColumn(table_list, table_name)</span><br><span class="line"></span><br><span class="line">    markdown_build = MarkDownBuild()</span><br><span class="line"></span><br><span class="line">    text = markdown_build.buildMarkdown(table_data)</span><br><span class="line">    file_name = os.path.basename(<span class="built_in">dir</span>).split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;.md&#x27;</span></span><br><span class="line">    <span class="comment"># 写文件</span></span><br><span class="line">    file_obj = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        file_obj = <span class="built_in">open</span>(md_dir + file_name, <span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        exit(<span class="string">&#x27;文件创建失败&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        file_obj.write(text)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        exit(<span class="string">&#x27;文件写入失败&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        file_obj.close()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;数据库文档已经成功创建,文件在md目录下.&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileParser</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义分离SQL文件匹配模式</span></span><br><span class="line">    <span class="comment"># table_pattern = r&#x27;CREATE TABLE([\s\S]*?)LOCK TABLES&#x27;    #分离表</span></span><br><span class="line">    table_pattern = <span class="string">r&#x27;CREATE TABLE([\s\S]*?);&#x27;</span></span><br><span class="line">    name_pattern = <span class="string">r&#x27;.*?`(.*?)`.*?&#x27;</span> <span class="comment"># 获取表名称或字段名称</span></span><br><span class="line">    table_content_pattern = <span class="string">r&#x27;COMMENT=\&#x27;(.*?)\&#x27;&#x27;</span>   <span class="comment">#获取表详情</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">separatTable</span>(<span class="params">self, content</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;将SQL文件中各个表分离开来</span></span><br><span class="line"><span class="string">        :param content:文件内容</span></span><br><span class="line"><span class="string">        :return:表分离后的内容</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        pattren = re.<span class="built_in">compile</span>(self.table_pattern)</span><br><span class="line">        table_list = re.findall(pattren, content)</span><br><span class="line">        <span class="keyword">return</span> table_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parserTableName</span>(<span class="params">self, table_list</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        解析出数据库中所有表的表名</span></span><br><span class="line"><span class="string">        列表中前者为表名,后者为表含义</span></span><br><span class="line"><span class="string">        :param table_list:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        dirty_table_name = []</span><br><span class="line">        dirty_table_content = []</span><br><span class="line">        table_name = []</span><br><span class="line">        <span class="comment"># 取出表名和表含义行脏数据</span></span><br><span class="line">        <span class="keyword">for</span> table <span class="keyword">in</span> table_list:</span><br><span class="line">            tmp = table.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            dirty_table_name.append(tmp[<span class="number">0</span>])</span><br><span class="line">            dirty_table_content.append(tmp[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dirty_table_name)):</span><br><span class="line">            tmp = []</span><br><span class="line">            <span class="comment"># 从脏数据中取出表名</span></span><br><span class="line">            <span class="comment"># print dirty_table_name[i].strip()</span></span><br><span class="line">            name = re.match(self.name_pattern, dirty_table_name[i].strip())</span><br><span class="line">            <span class="keyword">if</span> name != <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># print name.group(1)</span></span><br><span class="line">                tmp.append(name.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 从脏数据中取出表含义</span></span><br><span class="line">            content = re.match(self.table_content_pattern, dirty_table_content[i].split(<span class="string">&#x27; &#x27;</span>)[-<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> content != <span class="literal">None</span>:</span><br><span class="line">                tmp.append(content.group(<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp.append(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            table_name.append(tmp)</span><br><span class="line">        <span class="keyword">return</span> table_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parserColumn</span>(<span class="params">self, table_list, table_name</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        获取字段情况</span></span><br><span class="line"><span class="string">        :param table_list: separatTable中分离出的数据</span></span><br><span class="line"><span class="string">        :param table_name: parserTableName中解析出的数据</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        dirty_column_list = []</span><br><span class="line">        <span class="keyword">for</span> table <span class="keyword">in</span> table_list:</span><br><span class="line">            dirty_column_list.append(table.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line">        table_data = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dirty_column_list)):</span><br><span class="line">            dirty_column = []</span><br><span class="line">            dirty_column = dirty_column_list[i]</span><br><span class="line">            column_tmp = []</span><br><span class="line">            <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            先取两边空格</span></span><br><span class="line"><span class="string">            用空格分割</span></span><br><span class="line"><span class="string">            第一个有没有``,有取出来,无舍弃</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> column <span class="keyword">in</span> dirty_column:</span><br><span class="line">                tmp_list = column.strip().split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                column_name = re.match(<span class="string">r&#x27;`(.*?)`&#x27;</span>, tmp_list[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">if</span> column_name != <span class="literal">None</span>:</span><br><span class="line">                    column_name = column_name.group(<span class="number">1</span>)</span><br><span class="line">                    column_type = tmp_list[<span class="number">1</span>]</span><br><span class="line">                    <span class="comment"># <span class="doctag">TODO:</span>此处无法正确匹配,使用取列表最后一项,可能会有bug</span></span><br><span class="line">                    column_comment = re.match(<span class="string">r&#x27;.*?COMMENT \&#x27;(.*?)\&#x27;.*?&#x27;</span>, column.strip())</span><br><span class="line">                    <span class="keyword">if</span> column_comment <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                        column_comment = column_comment.group(<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        column_comment = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># if &#x27;\&#x27;&#x27; in tmp_list[-1]:</span></span><br><span class="line">                    <span class="comment">#     column_comment = tmp_list[-1][1:-2]</span></span><br><span class="line">                    <span class="comment"># else:</span></span><br><span class="line">                    <span class="comment">#     column_comment = &#x27;&#x27;</span></span><br><span class="line">                    column_tmp.append([column_name, column_type, column_comment])</span><br><span class="line">            table_data.append([table_name[i], column_tmp])</span><br><span class="line">        <span class="keyword">return</span> table_data</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MarkDownBuild</span>:</span></span><br><span class="line"></span><br><span class="line">    table_header = <span class="string">&#x27;|字段名称|字段类型|字段含义|\n|:---:|:---:|:---:|\n&#x27;</span></span><br><span class="line">    table_content_template = <span class="string">&#x27;|%s|%s|%s|\n&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buildMarkdown</span>(<span class="params">self, table_data</span>):</span></span><br><span class="line">        text = <span class="string">&#x27;# 数据库文档\n\n&#x27;</span></span><br><span class="line">        text += <span class="string">&#x27;&lt;a name=&quot;返回顶部&quot;&gt;&lt;/a&gt;\n\n## 数据表列表\n\n&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> table <span class="keyword">in</span> table_data:</span><br><span class="line">            text = text + <span class="string">&#x27;* [&#x27;</span> + table[<span class="number">0</span>][<span class="number">0</span>] + <span class="string">&#x27;(&#x27;</span> + table[<span class="number">0</span>][<span class="number">1</span>] + <span class="string">&#x27;)](#&#x27;</span> + table[<span class="number">0</span>][<span class="number">0</span>] + <span class="string">&#x27;_pointer)\n\n&#x27;</span></span><br><span class="line">        text += <span class="string">&#x27;\n\n## 数据表说明\n\n&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> table <span class="keyword">in</span> table_data:</span><br><span class="line">            text = text + <span class="string">&#x27;&lt;a name=&quot;&#x27;</span>+table[<span class="number">0</span>][<span class="number">0</span>]+<span class="string">&#x27;_pointer&quot;&gt;&lt;/a&gt;\n\n&#x27;</span></span><br><span class="line">            text = text + <span class="string">&#x27;* &#x27;</span> + table[<span class="number">0</span>][<span class="number">0</span>] + <span class="string">&#x27;表(&#x27;</span> + table[<span class="number">0</span>][<span class="number">1</span>] + <span class="string">&#x27;)[↑](#返回顶部)\n\n&#x27;</span></span><br><span class="line">            text += self.table_header</span><br><span class="line">            <span class="keyword">for</span> column <span class="keyword">in</span> table[<span class="number">1</span>]:</span><br><span class="line">                text = text + <span class="string">&#x27;|&#x27;</span> + column[<span class="number">0</span>] + <span class="string">&#x27;|&#x27;</span> + column[<span class="number">1</span>] + <span class="string">&#x27;|&#x27;</span> + column[<span class="number">2</span>] + <span class="string">&#x27;|\n&#x27;</span></span><br><span class="line">            text += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> text</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;python-将-sql-导出为-md&quot;&gt;&lt;a href=&quot;#python-将-sql-导出为-md&quot; class=&quot;headerlink&quot; title=&quot;python 将 sql 导出为 md&quot;&gt;&lt;/a&gt;python 将 sql 导出为 md&lt;/h1&gt;</summary>
    
    
    
    <category term="python" scheme="https://linqiankun.github.io/hexoblog/categories/python/"/>
    
    
    <category term="tool" scheme="https://linqiankun.github.io/hexoblog/tags/tool/"/>
    
    <category term="python" scheme="https://linqiankun.github.io/hexoblog/tags/python/"/>
    
    <category term="sql" scheme="https://linqiankun.github.io/hexoblog/tags/sql/"/>
    
    <category term="md" scheme="https://linqiankun.github.io/hexoblog/tags/md/"/>
    
  </entry>
  
  <entry>
    <title>python将数据库导出为md文件</title>
    <link href="https://linqiankun.github.io/hexoblog/md/python/python%E5%B0%86%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%BC%E5%87%BA%E4%B8%BAmd%E6%96%87%E4%BB%B6/"/>
    <id>https://linqiankun.github.io/hexoblog/md/python/python%E5%B0%86%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%BC%E5%87%BA%E4%B8%BAmd%E6%96%87%E4%BB%B6/</id>
    <published>2023-07-27T05:57:34.000Z</published>
    <updated>2023-07-27T06:09:31.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-将数据库导出为-md-文件"><a href="#python-将数据库导出为-md-文件" class="headerlink" title="python 将数据库导出为 md 文件"></a>python 将数据库导出为 md 文件</h1><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;用于在数据库设计的时候，将设计的表字段，转化为数据字典。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>python38</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Python version 3.7.1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">database_name</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成数据库字典表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    importlib.reload(sys)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用前修改配置</span></span><br><span class="line">    conn = mysql.connector.connect(</span><br><span class="line">        host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        port=<span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">        user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        password=<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">        use_pure=<span class="literal">True</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">    cursor.execute(</span><br><span class="line">        <span class="string">&quot;SELECT TABLE_NAME, TABLE_COMMENT FROM information_schema.TABLES WHERE table_type=&#x27;BASE TABLE&#x27; AND TABLE_SCHEMA=&#x27;%s&#x27;&quot;</span> % database_name</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    tables = cursor.fetchall()</span><br><span class="line"></span><br><span class="line">    markdown_table_header = <span class="string">&quot;&quot;&quot;\n\n\n### %s (%s) \n| 序号 | 字段名称 | 数据类型 | 是否为空 | 字段说明 |\n| :--: |----| ---- | ---- | ---- |\n&quot;&quot;&quot;</span></span><br><span class="line">    markdown_table_row = <span class="string">&quot;&quot;&quot;| %s | %s | %s | %s | %s |&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    f = <span class="built_in">open</span>(database_name + <span class="string">&#x27;.md&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> table <span class="keyword">in</span> tables:</span><br><span class="line"></span><br><span class="line">        cursor.execute(</span><br><span class="line">            <span class="string">&quot;SELECT ORDINAL_POSITION, COLUMN_NAME, COLUMN_TYPE, IS_NULLABLE, COLUMN_COMMENT &quot;</span></span><br><span class="line">            <span class="string">&quot;FROM information_schema.COLUMNS WHERE TABLE_SCHEMA=&#x27;%s&#x27; AND TABLE_NAME=&#x27;%s&#x27;&quot;</span> % (</span><br><span class="line">                database_name, table[<span class="number">0</span>]</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        tmp_table = cursor.fetchall()</span><br><span class="line">        p = markdown_table_header % (table[<span class="number">0</span>], remove_newline(table[<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> tmp_table:</span><br><span class="line">            p += (remove_newline(markdown_table_row % col) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        print(p)</span><br><span class="line">        f.writelines(p)</span><br><span class="line"></span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_newline</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    去除文本中的换行符号</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> text.replace(<span class="string">&quot;\r&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    generate(<span class="string">&#x27;输入要生成的数据库名&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;python-将数据库导出为-md-文件&quot;&gt;&lt;a href=&quot;#python-将数据库导出为-md-文件&quot; class=&quot;headerlink&quot; title=&quot;python 将数据库导出为 md 文件&quot;&gt;&lt;/a&gt;python 将数据库导出为 md 文件&lt;/h1&gt;</summary>
    
    
    
    <category term="python" scheme="https://linqiankun.github.io/hexoblog/categories/python/"/>
    
    
    <category term="tool" scheme="https://linqiankun.github.io/hexoblog/tags/tool/"/>
    
    <category term="python" scheme="https://linqiankun.github.io/hexoblog/tags/python/"/>
    
    <category term="sql" scheme="https://linqiankun.github.io/hexoblog/tags/sql/"/>
    
    <category term="md" scheme="https://linqiankun.github.io/hexoblog/tags/md/"/>
    
  </entry>
  
  <entry>
    <title>java多线程提交任务模板</title>
    <link href="https://linqiankun.github.io/hexoblog/md/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%8F%90%E4%BA%A4%E4%BB%BB%E5%8A%A1%E6%A8%A1%E6%9D%BF/"/>
    <id>https://linqiankun.github.io/hexoblog/md/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%8F%90%E4%BA%A4%E4%BB%BB%E5%8A%A1%E6%A8%A1%E6%9D%BF/</id>
    <published>2023-07-27T05:55:24.000Z</published>
    <updated>2023-07-27T06:03:12.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-多线程提交任务模板"><a href="#java-多线程提交任务模板" class="headerlink" title="java 多线程提交任务模板"></a>java 多线程提交任务模板</h1><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;java 中多线程批量处理任务的代码模板。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多线程提交任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutorDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> threadCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(threadCount &lt;= <span class="number">50</span> ? threadCount : <span class="number">50</span>, <span class="number">50</span>, <span class="number">0L</span>,</span><br><span class="line">                TimeUnit.MILLISECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">2000</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String param = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            ExecutorTask urlTask = <span class="keyword">new</span> ExecutorTask(param);</span><br><span class="line">            executor.execute(urlTask);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            executor.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExecutorTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String param;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExecutorTask</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.param = param;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;java-多线程提交任务模板&quot;&gt;&lt;a href=&quot;#java-多线程提交任务模板&quot; class=&quot;headerlink&quot; title=&quot;java 多线程提交任务模板&quot;&gt;&lt;/a&gt;java 多线程提交任务模板&lt;/h1&gt;</summary>
    
    
    
    <category term="java" scheme="https://linqiankun.github.io/hexoblog/categories/java/"/>
    
    <category term="多线程" scheme="https://linqiankun.github.io/hexoblog/categories/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="java" scheme="https://linqiankun.github.io/hexoblog/tags/java/"/>
    
    <category term="tool" scheme="https://linqiankun.github.io/hexoblog/tags/tool/"/>
    
    <category term="多线程" scheme="https://linqiankun.github.io/hexoblog/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java线程池代码模板</title>
    <link href="https://linqiankun.github.io/hexoblog/md/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/"/>
    <id>https://linqiankun.github.io/hexoblog/md/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/</id>
    <published>2023-07-27T05:55:24.000Z</published>
    <updated>2023-07-27T06:03:15.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-线程池代码模板"><a href="#java-线程池代码模板" class="headerlink" title="java 线程池代码模板"></a>java 线程池代码模板</h1><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;java 中创建默认的线程池的代码模板。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lin.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">            executorService.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(</span><br><span class="line">                                <span class="string">&quot;HH:mm:ss&quot;</span>);</span><br><span class="line">                        System.out.println(<span class="string">&quot;运行时间: &quot;</span> +</span><br><span class="line">                                sdf.format(<span class="keyword">new</span> Date()) + <span class="string">&quot; &quot;</span> + index + <span class="string">&quot; &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单线程线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">            executorService.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(</span><br><span class="line">                                <span class="string">&quot;HH:mm:ss&quot;</span>);</span><br><span class="line">                        System.out.println(<span class="string">&quot;运行时间: &quot;</span> +</span><br><span class="line">                                sdf.format(<span class="keyword">new</span> Date()) + <span class="string">&quot; &quot;</span> + index + <span class="string">&quot; &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定长线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newFixedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">            executorService.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(</span><br><span class="line">                                <span class="string">&quot;HH:mm:ss&quot;</span>);</span><br><span class="line">                        System.out.println(<span class="string">&quot;运行时间: &quot;</span> +</span><br><span class="line">                                sdf.format(<span class="keyword">new</span> Date()) + <span class="string">&quot; &quot;</span> + index + <span class="string">&quot; &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定时执行的线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newScheduledThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(<span class="number">3</span>);</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(</span><br><span class="line">                <span class="string">&quot;HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">            System.out.println(<span class="string">&quot;提交时间: &quot;</span> + sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">            executorService.schedule(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">&quot;运行时间: &quot;</span> +</span><br><span class="line">                                sdf.format(<span class="keyword">new</span> Date()) + <span class="string">&quot; &quot;</span> + index + <span class="string">&quot; &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 周期执行的线程池</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newScheduledThreadPool2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(<span class="number">3</span>);</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(</span><br><span class="line">                <span class="string">&quot;HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; 5; i++) &#123;</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;提交时间: &quot;</span> + sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">        executorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">&quot;运行时间: &quot;</span> +</span><br><span class="line">                            sdf.format(<span class="keyword">new</span> Date()) + <span class="string">&quot; &quot;</span> + index + <span class="string">&quot; &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//主线程等待10秒钟后关闭</span></span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;java-线程池代码模板&quot;&gt;&lt;a href=&quot;#java-线程池代码模板&quot; class=&quot;headerlink&quot; title=&quot;java 线程池代码模板&quot;&gt;&lt;/a&gt;java 线程池代码模板&lt;/h1&gt;</summary>
    
    
    
    <category term="java" scheme="https://linqiankun.github.io/hexoblog/categories/java/"/>
    
    <category term="多线程" scheme="https://linqiankun.github.io/hexoblog/categories/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="java" scheme="https://linqiankun.github.io/hexoblog/tags/java/"/>
    
    <category term="tool" scheme="https://linqiankun.github.io/hexoblog/tags/tool/"/>
    
    <category term="多线程" scheme="https://linqiankun.github.io/hexoblog/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot获取文件方式</title>
    <link href="https://linqiankun.github.io/hexoblog/md/spring/springboot/SpringBoot%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F/"/>
    <id>https://linqiankun.github.io/hexoblog/md/spring/springboot/SpringBoot%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F/</id>
    <published>2023-07-27T05:54:04.000Z</published>
    <updated>2023-07-27T06:03:23.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-获取文件方式"><a href="#SpringBoot-获取文件方式" class="headerlink" title="SpringBoot 获取文件方式"></a>SpringBoot 获取文件方式</h1><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;用于在 SpringBoot 项目中，读取项目中的文件，如 Excel 文件等。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.ClassUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ResourceLoader resourceLoader = <span class="keyword">new</span> DefaultResourceLoader();</span><br><span class="line">        InputStream inputStream = resourceLoader.getResource(<span class="string">&quot;classpath:dcexcel.xlsx&quot;</span>).getInputStream();</span><br><span class="line">        String path = ClassUtils.getDefaultClassLoader().getResource(<span class="string">&quot;&quot;</span>).getPath();</span><br><span class="line">        log.info(path);</span><br><span class="line">        InputStream inputStream = getClass().getClassLoader().getResourceAsStream(<span class="string">&quot;dcexcel.xlsx&quot;</span>);</span><br><span class="line">        ClassPathResource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">&quot;dcexcel.xlsx&quot;</span>);</span><br><span class="line">        InputStream inputStream = resource.getInputStream();</span><br><span class="line">        InputStream resourceAsStream = <span class="keyword">this</span>.getClass().getResourceAsStream(<span class="string">&quot;dcexcel.xlsx&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span> + URLEncoder.encode(<span class="string">&quot;dcexcel.xlsx&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        ServletOutputStream outputStream = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> i = inputStream.read(buffer);</span><br><span class="line">        <span class="keyword">while</span> (i != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(buffer, <span class="number">0</span>, i);</span><br><span class="line">            i = inputStream.read(buffer);</span><br><span class="line">        &#125;</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SpringBoot-获取文件方式&quot;&gt;&lt;a href=&quot;#SpringBoot-获取文件方式&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot 获取文件方式&quot;&gt;&lt;/a&gt;SpringBoot 获取文件方式&lt;/h1&gt;</summary>
    
    
    
    <category term="spring" scheme="https://linqiankun.github.io/hexoblog/categories/spring/"/>
    
    
    <category term="spring" scheme="https://linqiankun.github.io/hexoblog/tags/spring/"/>
    
    <category term="tool" scheme="https://linqiankun.github.io/hexoblog/tags/tool/"/>
    
    <category term="springboot" scheme="https://linqiankun.github.io/hexoblog/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Maven清理脚本</title>
    <link href="https://linqiankun.github.io/hexoblog/md/tool/Maven%E6%B8%85%E7%90%86%E8%84%9A%E6%9C%AC/"/>
    <id>https://linqiankun.github.io/hexoblog/md/tool/Maven%E6%B8%85%E7%90%86%E8%84%9A%E6%9C%AC/</id>
    <published>2023-07-27T03:27:05.000Z</published>
    <updated>2023-07-27T04:07:37.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Maven-清理脚本"><a href="#Maven-清理脚本" class="headerlink" title="Maven 清理脚本"></a>Maven 清理脚本</h1><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;该代码块用于将本地 maven 仓库中的空文件夹，错误包清理。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>&emsp;&emsp;需要更改源代码，将代码中的本地 maven 路径改为自己的存储路径。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li>建立 text 文档</li><li>将下面的代码复制过去</li><li>修改代码的 maven 仓库地址为你的仓库地址</li><li>保存文件，将文件扩展名改为 bat</li><li>双击执行文件，或在控制台执行文件</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> REPOSITORY_PATH=这里填你的本地仓库路径如(F:\maven\repository)</span><br><span class="line"><span class="comment">rem Searching now...</span></span><br><span class="line"><span class="keyword">for</span> /f &quot;delims=&quot; <span class="variable">%%i</span> <span class="keyword">in</span> (&#x27;<span class="built_in">dir</span> /b /s &quot;<span class="variable">%REPOSITORY_PATH%</span>\*lastUpdated*&quot;&#x27;) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">del</span> /s /q <span class="variable">%%i</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> /f &quot;delims=&quot; <span class="variable">%%i</span> <span class="keyword">in</span> (&#x27;<span class="built_in">dir</span> /b /s &quot;<span class="variable">%REPOSITORY_PATH%</span>\*unknown*&quot;&#x27;) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">rmdir</span> /s /q <span class="variable">%%i</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">rem Clean success</span></span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Maven-清理脚本&quot;&gt;&lt;a href=&quot;#Maven-清理脚本&quot; class=&quot;headerlink&quot; title=&quot;Maven 清理脚本&quot;&gt;&lt;/a&gt;Maven 清理脚本&lt;/h1&gt;</summary>
    
    
    
    <category term="tool" scheme="https://linqiankun.github.io/hexoblog/categories/tool/"/>
    
    
    <category term="java" scheme="https://linqiankun.github.io/hexoblog/tags/java/"/>
    
    <category term="tool" scheme="https://linqiankun.github.io/hexoblog/tags/tool/"/>
    
    <category term="maven" scheme="https://linqiankun.github.io/hexoblog/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Excel分割插件</title>
    <link href="https://linqiankun.github.io/hexoblog/md/tool/Excel%E5%88%86%E5%89%B2%E6%8F%92%E4%BB%B6/"/>
    <id>https://linqiankun.github.io/hexoblog/md/tool/Excel%E5%88%86%E5%89%B2%E6%8F%92%E4%BB%B6/</id>
    <published>2023-07-27T03:26:05.000Z</published>
    <updated>2023-07-27T03:34:00.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Excel分割插件"><a href="#Excel分割插件" class="headerlink" title="Excel分割插件"></a>Excel分割插件</h1><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;该插件将大的Excel分割为多个小的Excel。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>&emsp;&emsp;在Excel将下面的代码插入，运行即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> copybat()</span><br><span class="line">    <span class="keyword">Dim</span> i, j, k, m, r <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line">    <span class="keyword">Dim</span> n, total_data <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    <span class="keyword">Dim</span> path <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">Dim</span> title_area, data_column, data_areas <span class="keyword">As</span> Range</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">Set</span> title_area = Application.InputBox(prompt:=<span class="string">&quot;请用鼠标选择表头及表标题所在区域&quot;</span>, title:=<span class="string">&quot;选择&quot;</span>, Type:=<span class="number">8</span>) <span class="comment">&#x27;选取表头区域</span></span><br><span class="line">    <span class="keyword">Set</span> data_column = Application.InputBox(prompt:=<span class="string">&quot;请鼠标选择需要拆分数据的开始行区域&quot;</span>, title:=<span class="string">&quot;选择&quot;</span>, Type:=<span class="number">8</span>) <span class="comment">&#x27;选取拆分起始处</span></span><br><span class="line">    m = data_column.Row      <span class="comment">&#x27;获取分割开始行所在区域行号</span></span><br><span class="line">    r = data_column.Column   <span class="comment">&#x27;获取分割开始行所在区域列号</span></span><br><span class="line">    j = data_column.Columns.Count   <span class="comment">&#x27;获取分割开始行区域列数</span></span><br><span class="line">    i = Application.InputBox(prompt:=<span class="string">&quot;请输入每次分割数据条目数&quot;</span>, title:=<span class="string">&quot;选择&quot;</span>)</span><br><span class="line">  </span><br><span class="line">   <span class="comment">&#x27;获取需要分割的数据总条数。这里，可以用两种办法获取到数据区域的尾部行号</span></span><br><span class="line">      <span class="comment">&#x27;第一种，使用传统的：End(xlDown).Row，优点是速度快，缺点是有空白行时会出错</span></span><br><span class="line">      <span class="comment">&#x27;第二种，使用查找方式find，优点是基本不会出错，缺点是条数较多时候可能会慢一点</span></span><br><span class="line">   <span class="comment">&#x27;total_data = Cells(data_column(1, 1)).End(xlDown).Row - m + 1 </span></span><br><span class="line">    total_data= Cells.Find(<span class="string">&quot;*&quot;</span>, LookIn:=xlFormulas, SearchDirection:=xlPrevious).Row- m + <span class="number">1</span>   </span><br><span class="line">    <span class="keyword">If</span> MsgBox(<span class="string">&quot;本次分割文件数据总数为:&quot;</span> &amp; total_data &amp; <span class="string">&quot;条，将会被分割成&quot;</span> &amp; WorksheetFunction.RoundUp(total_data / i, <span class="number">0</span>) &amp; <span class="string">&quot;个文件，&quot;</span> _</span><br><span class="line">                &amp; <span class="string">&quot;点击“确定”开始分割，点击“取消”返回&quot;</span>, vbOKCancel, <span class="string">&quot;确认&quot;</span>) = vbOK <span class="keyword">Then</span></span><br><span class="line">        filename = Application.InputBox(prompt:=<span class="string">&quot;请输入分割后的文件主名，默认为“分割文件”&quot;</span>, title:=<span class="string">&quot;选择&quot;</span>, <span class="keyword">Default</span>:=<span class="string">&quot;分割文件&quot;</span>) </span><br><span class="line">        <span class="keyword">With</span> Application.FileDialog(msoFileDialogFolderPicker)  <span class="comment">&#x27;获取分割后的文件存储路径</span></span><br><span class="line">            <span class="keyword">If</span> .Show = <span class="literal">False</span> <span class="keyword">Then</span> <span class="keyword">Exit</span> <span class="keyword">Sub</span></span><br><span class="line">                path = .SelectedItems(<span class="number">1</span>)&amp;<span class="string">&quot;\&quot;</span>   <span class="comment">&#x27;加入&quot;\&quot;,否则，文件会被存储到选定路径的上一层</span></span><br><span class="line">        <span class="keyword">End</span> <span class="keyword">With</span></span><br><span class="line">        Application.ScreenUpdating = <span class="literal">False</span></span><br><span class="line">        k = <span class="number">0</span>   <span class="comment">&#x27;第几次分割输出，用于标识分割文件次数</span></span><br><span class="line">        <span class="keyword">For</span> n = m <span class="keyword">To</span> total_data <span class="keyword">Step</span> i   <span class="comment">&#x27;从开始分割的行往下计数</span></span><br><span class="line">            <span class="keyword">Set</span> data_areas = Range(Cells(n, r), Cells(n + i - <span class="number">1</span>, j))   <span class="comment">&#x27;设置每次循环体内的分割数据主体</span></span><br><span class="line">            Application.Union(title_area, data_areas).<span class="keyword">Select</span>           <span class="comment">&#x27;把表头区域以及本次循环体内的数据区域进行合并</span></span><br><span class="line">            Selection.Copy</span><br><span class="line">            Workbooks.Add</span><br><span class="line">            Selection.PasteSpecial Paste:=xlPasteAllUsingSourceTheme, Operation:=xlNone _</span><br><span class="line">            , SkipBlanks:=<span class="literal">False</span>, Transpose:=<span class="literal">False</span>      <span class="comment">&#x27;特殊粘贴：包含源格式的粘贴，以便保持所有格式一致</span></span><br><span class="line">           k = k + <span class="number">1</span></span><br><span class="line">           ActiveWorkbook.SaveAs filename:=path &amp; filename &amp; <span class="string">&quot;_&quot;</span> &amp; k &amp; <span class="string">&quot;.xlsx&quot;</span>, FileFormat:= _</span><br><span class="line">            xlOpenXMLWorkbook, CreateBackup:=<span class="literal">False</span>      <span class="comment">&#x27;按照既有的文件名、路径、循环次数合并起来存储文件</span></span><br><span class="line">            ActiveWindow.Close</span><br><span class="line">        <span class="keyword">Next</span> n</span><br><span class="line">        MsgBox <span class="string">&quot;文件分割完毕！&quot;</span>, vbDefaultButton1, <span class="string">&quot;提示&quot;</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">    Application.ScreenUpdating = <span class="literal">True</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Excel分割插件&quot;&gt;&lt;a href=&quot;#Excel分割插件&quot; class=&quot;headerlink&quot; title=&quot;Excel分割插件&quot;&gt;&lt;/a&gt;Excel分割插件&lt;/h1&gt;</summary>
    
    
    
    <category term="tool" scheme="https://linqiankun.github.io/hexoblog/categories/tool/"/>
    
    
    <category term="tool" scheme="https://linqiankun.github.io/hexoblog/tags/tool/"/>
    
    <category term="vb" scheme="https://linqiankun.github.io/hexoblog/tags/vb/"/>
    
    <category term="excel" scheme="https://linqiankun.github.io/hexoblog/tags/excel/"/>
    
  </entry>
  
  <entry>
    <title>BiliBili下载视频重命名</title>
    <link href="https://linqiankun.github.io/hexoblog/md/tool/BiliBili%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91%E9%87%8D%E5%91%BD%E5%90%8D/"/>
    <id>https://linqiankun.github.io/hexoblog/md/tool/BiliBili%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91%E9%87%8D%E5%91%BD%E5%90%8D/</id>
    <published>2023-07-27T03:25:05.000Z</published>
    <updated>2023-07-27T03:33:13.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BiliBili下载视频重命名"><a href="#BiliBili下载视频重命名" class="headerlink" title="BiliBili下载视频重命名"></a>BiliBili下载视频重命名</h1><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;该代码块用于将BiliBili UWP客户端下载的视频进行重命名。<br>&emsp;&emsp;</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>&emsp;&emsp;需要更改源代码，将代码中的文件路径改为自己的存储路径。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BiliBili下载视频重命名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileRename</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fileRename</span><span class="params">(File file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">                File[] files = file.listFiles();</span><br><span class="line">                <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">                    fileRename(f);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">                String name = file.getName();</span><br><span class="line">                <span class="keyword">if</span> (name.endsWith(<span class="string">&quot;.mp4&quot;</span>)) &#123;</span><br><span class="line">                    String parent = file.getParent();</span><br><span class="line">                    System.out.println(parent);</span><br><span class="line">                    String[] s = name.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">                    File titlefile = <span class="keyword">new</span> File(parent + <span class="string">&quot;/&quot;</span> + s[<span class="number">0</span>] + <span class="string">&quot;.info&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        FileReader reader = <span class="keyword">new</span> FileReader(titlefile);</span><br><span class="line">                        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(reader);</span><br><span class="line">                        String s1 = bufferedReader.readLine();</span><br><span class="line">                        JSONObject jsonObject = JSONObject.parseObject(s1);</span><br><span class="line">                        String title = (String) jsonObject.get(<span class="string">&quot;Title&quot;</span>);</span><br><span class="line">                        file.renameTo(<span class="keyword">new</span> File(parent + File.separator + title.replaceAll(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;-&quot;</span>).replaceAll(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>) + <span class="string">&quot;.mp4&quot;</span>));</span><br><span class="line"><span class="comment">//                        File newfile = new File(parent + File.separator + title.trim().replaceAll(&quot;/&quot;,&quot;-&quot;) + &quot;.mp4&quot;);</span></span><br><span class="line"><span class="comment">//                        newfile.createNewFile();</span></span><br><span class="line"><span class="comment">//                        try (FileInputStream fileInputStream = new FileInputStream(file)) &#123;</span></span><br><span class="line"><span class="comment">//                            try (FileOutputStream fileOutputStream = new FileOutputStream(newfile)) &#123;</span></span><br><span class="line"><span class="comment">//                                byte[] bytes = new byte[1024];</span></span><br><span class="line"><span class="comment">//                                while (fileInputStream.read(bytes) &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">//                                    fileOutputStream.write(bytes);</span></span><br><span class="line"><span class="comment">//                                &#125;</span></span><br><span class="line"><span class="comment">//                            &#125;</span></span><br><span class="line"><span class="comment">//                        &#125;</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        log.error(e.getMessage(), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fileNameTrim</span><span class="params">(File file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">                File[] files = file.listFiles();</span><br><span class="line">                <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">                    fileNameTrim(f);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">                String name = file.getName();</span><br><span class="line">                <span class="keyword">if</span> (name.endsWith(<span class="string">&quot;.mp4&quot;</span>)) &#123;</span><br><span class="line">                    String fileName = file.getName();</span><br><span class="line">                    String parent = file.getParent();</span><br><span class="line">                    File newfile = <span class="keyword">new</span> File(parent + File.separator + fileName.replaceAll(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;-&quot;</span>).replaceAll(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="comment">//                    while (newfile.exists()) &#123;</span></span><br><span class="line"><span class="comment">//                        String fileName2 = parent + File.separator + newfile.getName();</span></span><br><span class="line"><span class="comment">//                        String newfileName = fileName2.substring(0, fileName2.lastIndexOf(&quot;.&quot;)) + &quot;(1).mp4&quot;;</span></span><br><span class="line"><span class="comment">//                        newfile = new File(newfileName);</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line">                    file.renameTo(newfile);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       fileRename(<span class="keyword">new</span> File(<span class="string">&quot;D:\\新建文件夹&quot;</span>));</span><br><span class="line">        <span class="comment">// fileNameTrim(new File((&quot;D:\\Videos\\BiliBliVideo&quot;)));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;BiliBili下载视频重命名&quot;&gt;&lt;a href=&quot;#BiliBili下载视频重命名&quot; class=&quot;headerlink&quot; title=&quot;BiliBili下载视频重命名&quot;&gt;&lt;/a&gt;BiliBili下载视频重命名&lt;/h1&gt;</summary>
    
    
    
    <category term="tool" scheme="https://linqiankun.github.io/hexoblog/categories/tool/"/>
    
    
    <category term="java" scheme="https://linqiankun.github.io/hexoblog/tags/java/"/>
    
    <category term="tool" scheme="https://linqiankun.github.io/hexoblog/tags/tool/"/>
    
    <category term="bilibili" scheme="https://linqiankun.github.io/hexoblog/tags/bilibili/"/>
    
  </entry>
  
  <entry>
    <title>BiliBili收藏导出插件</title>
    <link href="https://linqiankun.github.io/hexoblog/md/tool/BiliBili%E6%94%B6%E8%97%8F%E5%AF%BC%E5%87%BA%E6%8F%92%E4%BB%B6/"/>
    <id>https://linqiankun.github.io/hexoblog/md/tool/BiliBili%E6%94%B6%E8%97%8F%E5%AF%BC%E5%87%BA%E6%8F%92%E4%BB%B6/</id>
    <published>2023-07-27T03:24:05.000Z</published>
    <updated>2023-07-27T03:33:18.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BiliBili收藏导出插件"><a href="#BiliBili收藏导出插件" class="headerlink" title="BiliBili收藏导出插件"></a>BiliBili收藏导出插件</h1><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;用于将BiliBili的收藏，批量导出到一个html文件中。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>&emsp;&emsp;在浏览器打开BiliBili收藏页，F12打开控制台，将下面的代码复制进入执行，保存html即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_list</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    $(<span class="string">&quot;.fav-video-list &gt; li &gt;a.title&quot;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        result += $(<span class="built_in">this</span>).text() + <span class="string">&#x27;&lt;br&gt;&lt;a href=&quot;&#x27;</span> + $(<span class="built_in">this</span>).attr(<span class="string">&quot;href&quot;</span>) + <span class="string">&#x27;&quot; target=_blank &gt;https:&#x27;</span> + $(<span class="built_in">this</span>).attr(<span class="string">&quot;href&quot;</span>) + <span class="string">&#x27;&lt;/a&gt;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> html = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    html += get_list();</span><br><span class="line">    <span class="keyword">if</span> ($(<span class="string">&quot;.be-pager-next:visible&quot;</span>).length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">document</span>.write(html);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">&quot;.be-pager-next&quot;</span>).click();</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="string">&quot;main()&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BiliBili收藏列表导出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">main();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;BiliBili收藏导出插件&quot;&gt;&lt;a href=&quot;#BiliBili收藏导出插件&quot; class=&quot;headerlink&quot; title=&quot;BiliBili收藏导出插件&quot;&gt;&lt;/a&gt;BiliBili收藏导出插件&lt;/h1&gt;</summary>
    
    
    
    <category term="tool" scheme="https://linqiankun.github.io/hexoblog/categories/tool/"/>
    
    
    <category term="tool" scheme="https://linqiankun.github.io/hexoblog/tags/tool/"/>
    
    <category term="bilibili" scheme="https://linqiankun.github.io/hexoblog/tags/bilibili/"/>
    
    <category term="js" scheme="https://linqiankun.github.io/hexoblog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>md流程图系列</title>
    <link href="https://linqiankun.github.io/hexoblog/md/tool/md%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B3%BB%E5%88%97/"/>
    <id>https://linqiankun.github.io/hexoblog/md/tool/md%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B3%BB%E5%88%97/</id>
    <published>2021-10-31T11:01:30.000Z</published>
    <updated>2022-06-02T04:41:29.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h1><span id="more"></span><h2 id="Mermaid-系列"><a href="#Mermaid-系列" class="headerlink" title="Mermaid 系列"></a>Mermaid 系列</h2><h3 id="横向流程图"><a href="#横向流程图" class="headerlink" title="横向流程图"></a>横向流程图</h3><pre class="mermaid">graph LRA[方形]-->B(圆角)B-->C{条件a}C-->|a=1|D[结果1]C-->|a=2|E[结果2]D-->F[结束]E-->F</pre><h3 id="竖向流程图"><a href="#竖向流程图" class="headerlink" title="竖向流程图"></a>竖向流程图</h3><pre class="mermaid">graph TDA[方形]-->B(圆角)B-->C{条件a}C-->|a=1|D[结果1]C-->|a=2|E[结果2]D-->F[结束]E-->F</pre><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><pre class="mermaid">sequenceDiagram    participant 张三    participant 李四    张三->王五: 王五你好吗？    loop 健康检查        王五->王五: 与疾病战斗    end    Note right of 王五: 合理 食物 <br/>看医生...    李四-->>张三: 很好!    王五->李四: 你怎么样?    李四-->王五: 很好!</pre><h3 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h3><pre class="mermaid">gantt    dateFormat  YYYY-MM-DD    title 软件开发甘特图    section 设计    需求                      :done,    des1, 2014-01-06,2014-01-08    原型                      :active,  des2, 2014-01-09, 3d    UI设计                    :         des3, after des2, 5d    未来任务                  :         des4, after des3, 5d    section 开发    学习准备理解需求           :crit, done, 2014-01-06,24h    设计框架                  :crit, done, after des2, 2d    开发                      :crit, active, 3d    未来任务                  :crit, 5d    耍                        :2d    section 测试    功能测试                  :active, a1, after des3, 3d    压力测试                  :after a1, 20h    测试报告                  : 48h</pre><hr><h2 id="Flow系列"><a href="#Flow系列" class="headerlink" title="Flow系列"></a>Flow系列</h2><h3 id="横向流程图-1"><a href="#横向流程图-1" class="headerlink" title="横向流程图"></a>横向流程图</h3><div id="flowchart-0" class="flow-chart"></div><h3 id="竖向流程图-1"><a href="#竖向流程图-1" class="headerlink" title="竖向流程图"></a>竖向流程图</h3><div id="flowchart-1" class="flow-chart"></div><hr><h2 id="sequence系列"><a href="#sequence系列" class="headerlink" title="sequence系列"></a>sequence系列</h2><h3 id="uml时序图"><a href="#uml时序图" class="headerlink" title="uml时序图"></a>uml时序图</h3><div id="sequence-0"></div><h3 id="uml复杂时序图"><a href="#uml复杂时序图" class="headerlink" title="uml复杂时序图"></a>uml复杂时序图</h3><div id="sequence-1"></div><script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">对象A->对象B: 对象B你好吗？（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B-->对象A: 我很好(响应)对象A->对象B: 你真的好吗？</textarea><textarea id="sequence-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12,"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script><textarea id="sequence-1-code" style="display: none">对象A->对象B: 对象B你好吗？（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B-->对象A: 我很好(响应)对象B->小三: 你好吗小三-->>对象A: 对象B找我了对象A->对象B: 你真的好吗？Note right of C: 没人陪我玩Note over 小三,对象B: 我们是朋友</textarea><textarea id="sequence-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12,"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-1-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-1", options);</script><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始框op=>operation: 处理框cond=>condition: 判断框(是或否?)sub1=>subroutine: 子流程io=>inputoutput: 输入输出框e=>end: 结束框st->op->condcond(yes)->io->econd(no)->sub1(right)->op</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12,"theme":"simple"}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">st=>start: 开始框op=>operation: 处理框cond=>condition: 判断框(是或否?)sub1=>subroutine: 子流程io=>inputoutput: 输入输出框e=>end: 结束框st(right)->op(right)->condcond(yes)->io(bottom)->econd(no)->sub1(right)->op</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12,"theme":"simple"}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;画图&quot;&gt;&lt;a href=&quot;#画图&quot; class=&quot;headerlink&quot; title=&quot;画图&quot;&gt;&lt;/a&gt;画图&lt;/h1&gt;</summary>
    
    
    
    <category term="tool" scheme="https://linqiankun.github.io/hexoblog/categories/tool/"/>
    
    
    <category term="tool" scheme="https://linqiankun.github.io/hexoblog/tags/tool/"/>
    
    <category term="md" scheme="https://linqiankun.github.io/hexoblog/tags/md/"/>
    
  </entry>
  
  <entry>
    <title>redis哨兵模式</title>
    <link href="https://linqiankun.github.io/hexoblog/md/redis/redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://linqiankun.github.io/hexoblog/md/redis/redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-09-18T03:11:01.000Z</published>
    <updated>2021-09-18T08:19:59.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis高可用"><a href="#redis高可用" class="headerlink" title="redis高可用"></a>redis高可用</h1><p>&emsp;&emsp;redis的高可用模式一般有三种，主从复制，哨兵模式，集群模式。</p><span id="more"></span><h1 id="redis哨兵机制"><a href="#redis哨兵机制" class="headerlink" title="redis哨兵机制"></a>redis哨兵机制</h1><p>&emsp;&emsp;原理简单来说就是：通过一个哨兵集群去监控redis服务器集群，从而在集群中的主服务器挂掉之后，能第一时间选择一个从机升级为主机顶上去。<br>&emsp;&emsp;哨兵模式是一种特殊的模式，Redis提供了哨兵命令，哨兵是一个独立的进程。<br>&emsp;&emsp;其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控多个运行的Redis实例。</p><p><img src="https://gitee.com/linqiankun/picurl/raw/master/java/%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.png" alt="Redis哨兵"></p><p>这里哨兵发挥两个作用：</p><ol><li>通过发送命令，让Redis服务器返回其运行状态，包括主服务器和从服务器。</li><li>当哨兵检测到主机宕机时，会自动将从机切换成主机，然后通过发布订阅模式，通知其他从机，通知它们修改配置，切换主机。</li></ol><p>&emsp;&emsp;当单个哨兵监控集群时，可能会出现问题，可以使用多个哨兵进行监控，哨兵之间还可以相互监控，就形成了多哨兵模式。</p><p><img src="https://gitee.com/linqiankun/picurl/raw/master/java/%E5%93%A8%E5%85%B5%E7%BE%A4.png" alt="多哨兵监控集群"></p><p>&emsp;&emsp;故障切换过程，假设主服务器宕机，哨兵1检测到这个结果，系统并不会马山进行failover过程，仅仅时哨兵1主观的认为主服务不可用，这个现象称为主观下线。当后面的哨兵也检测到主服务不可用时，并且数量达到一定值（n/2+1，就是一半加1）的时候，哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover操作，切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为客观下线。这样对于客户端而言，一切都是透明的。</p><h1 id="参考文献-amp-鸣谢"><a href="#参考文献-amp-鸣谢" class="headerlink" title="参考文献 &amp; 鸣谢"></a>参考文献 &amp; 鸣谢</h1><ul><li><a href="https://www.jianshu.com/p/06ab9daf921d">Redis哨兵（Sentinel）模式</a></li><li><a href="https://www.jianshu.com/p/3088df513196">Redis哨兵集群</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;redis高可用&quot;&gt;&lt;a href=&quot;#redis高可用&quot; class=&quot;headerlink&quot; title=&quot;redis高可用&quot;&gt;&lt;/a&gt;redis高可用&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;redis的高可用模式一般有三种，主从复制，哨兵模式，集群模式。&lt;/p&gt;</summary>
    
    
    
    <category term="redis" scheme="https://linqiankun.github.io/hexoblog/categories/redis/"/>
    
    
    <category term="redis" scheme="https://linqiankun.github.io/hexoblog/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>大华二面面经</title>
    <link href="https://linqiankun.github.io/hexoblog/%E9%9D%A2%E7%BB%8F/answer/%E5%A4%A7%E5%8D%8E%E4%BA%8C%E9%9D%A2%E9%9D%A2%E7%BB%8F/"/>
    <id>https://linqiankun.github.io/hexoblog/%E9%9D%A2%E7%BB%8F/answer/%E5%A4%A7%E5%8D%8E%E4%BA%8C%E9%9D%A2%E9%9D%A2%E7%BB%8F/</id>
    <published>2021-07-27T01:28:46.000Z</published>
    <updated>2021-07-27T07:19:39.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h1><span id="more"></span><p>写面经，攒人品</p><ol><li>项目介绍</li><li>系统结构介绍</li><li>AQS<ol><li>底层结构</li><li>用在那些地方</li></ol></li><li>redis<ol><li>redis分布式锁的实现</li><li>集群情况</li></ol></li><li>rocketmq<ol><li>用在什么场景</li><li>消息同步不一致的情况怎么处理</li></ol></li></ol><hr><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><h2 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h2><ul><li><a href="../../../md/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/juc%E4%B9%8BAQS">juc之AQS</a></li><li><a href="../../../md/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/juc%E4%B9%8BAQS%E6%BA%90%E7%A0%81%E4%B8%80">juc之AQS源码一</a></li><li><a href="../../../md/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/juc%E4%B9%8BAQS%E6%BA%90%E7%A0%81%E4%BA%8C">juc之AQS源码二</a></li></ul><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><ul><li><a href="../../../md/redis/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81">redis分布式锁</a></li><li><a href="../../../categories/redis/">redis分类</a></li></ul><h2 id="rocketmq"><a href="#rocketmq" class="headerlink" title="rocketmq"></a>rocketmq</h2><ul><li><a href="../../../md/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/rocketmq%E6%B6%88%E6%81%AF%E5%8F%AF%E9%9D%A0%E6%80%A7">rocketmq消息可靠性</a></li><li><a href="../../../categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/">rocketmq分类</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;面经&quot;&gt;&lt;a href=&quot;#面经&quot; class=&quot;headerlink&quot; title=&quot;面经&quot;&gt;&lt;/a&gt;面经&lt;/h1&gt;</summary>
    
    
    
    <category term="面经" scheme="https://linqiankun.github.io/hexoblog/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    <category term="answer" scheme="https://linqiankun.github.io/hexoblog/categories/%E9%9D%A2%E7%BB%8F/answer/"/>
    
    
    <category term="面经" scheme="https://linqiankun.github.io/hexoblog/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>索引的优缺点</title>
    <link href="https://linqiankun.github.io/hexoblog/md/mysql/%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>https://linqiankun.github.io/hexoblog/md/mysql/%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/</id>
    <published>2021-07-22T06:53:37.000Z</published>
    <updated>2021-07-22T07:20:59.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>&emsp;&emsp;索引的作用在于创建索引能大大提高系统的性能。</p><span id="more"></span><hr><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ul><li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性</li><li>大大加快数据的检索速度，这也是创建索引的最主要原因</li><li>加快表与表之间的连接，在实现数据的参考完整性方面特别有意义</li><li>在使用分组和排序，子句进行数据检索时，同样可以显著减少查询中分组和排序的时间</li><li>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</li></ul><hr><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ul><li>创建索引和维护索引需要时间，这种时间随着数据量的增加而增加</li><li>索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占物理空间，如果要建立聚簇索引，需要的空间更大</li><li>当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这就降低了数据的维护速度。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;索引&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;索引的作用在于创建索引能大大提高系统的性能。&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://linqiankun.github.io/hexoblog/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="mysql" scheme="https://linqiankun.github.io/hexoblog/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/"/>
    
    
    <category term="mysql" scheme="https://linqiankun.github.io/hexoblog/tags/mysql/"/>
    
    <category term="数据库" scheme="https://linqiankun.github.io/hexoblog/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>大华一面面经</title>
    <link href="https://linqiankun.github.io/hexoblog/%E9%9D%A2%E7%BB%8F/answer/%E5%A4%A7%E5%8D%8E%E4%B8%80%E9%9D%A2%E9%9D%A2%E7%BB%8F/"/>
    <id>https://linqiankun.github.io/hexoblog/%E9%9D%A2%E7%BB%8F/answer/%E5%A4%A7%E5%8D%8E%E4%B8%80%E9%9D%A2%E9%9D%A2%E7%BB%8F/</id>
    <published>2021-07-21T01:52:29.000Z</published>
    <updated>2021-07-25T09:14:41.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h1><span id="more"></span><p>写面经，攒人品</p><ol><li>自我介绍</li><li>jvm类的加载过程？</li><li>dubbo如何做选举的？</li><li>了解的设计模式，spring用的设计模式？</li><li>还了解那些设计模式？</li><li>springboot里面的listener？</li><li>代理模式与AOP？</li><li>redis主从复制与哨兵模式？</li><li>分布式事务实现？</li><li>syncnorized和ReentrantLock的区别？</li><li>反问</li></ol><hr><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><h2 id="jvm类的加载过程"><a href="#jvm类的加载过程" class="headerlink" title="jvm类的加载过程"></a>jvm类的加载过程</h2><ul><li><a href="../../../md/java/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6">类加载机制</a>  </li><li><a href="https://www.yuque.com/jiufenshiren/ra5mzi/dvd9gz">类加载机制</a></li></ul><h2 id="dubbo如何做选举的"><a href="#dubbo如何做选举的" class="headerlink" title="dubbo如何做选举的"></a>dubbo如何做选举的</h2><p>&emsp;&emsp;这里的选举并不是zk的选举，而是服务消费方获取到提供方节点后，根据负载均衡算法选择某台机器进行远程调用。常见的负载均衡算法有：  </p><ul><li>轮询</li><li>随机</li><li>一致性Hash</li></ul><h2 id="spring用到的设计模式？"><a href="#spring用到的设计模式？" class="headerlink" title="spring用到的设计模式？"></a>spring用到的设计模式？</h2><ul><li>单例模式</li><li>工厂模式</li><li>代理模式</li><li>等</li></ul><h2 id="还了解那些设计模式？"><a href="#还了解那些设计模式？" class="headerlink" title="还了解那些设计模式？"></a>还了解那些设计模式？</h2><ul><li>模板方法模式</li><li>建造者模式</li><li>策略模式</li></ul><h2 id="springboot里面的listener？"><a href="#springboot里面的listener？" class="headerlink" title="springboot里面的listener？"></a>springboot里面的listener？</h2><h2 id="代理模式与AOP？"><a href="#代理模式与AOP？" class="headerlink" title="代理模式与AOP？"></a>代理模式与AOP？</h2><p>&emsp;&emsp;代理模式分为静态代理，动态代理，动态代理又可分为很多种，jdk，cglib等。<br>&emsp;&emsp;AOP是面向切面编程，其中用到了动态代理。</p><h2 id="redis主从复制与哨兵模式？"><a href="#redis主从复制与哨兵模式？" class="headerlink" title="redis主从复制与哨兵模式？"></a>redis主从复制与哨兵模式？</h2><ul><li><a href="https://www.yuque.com/jiufenshiren/ra5mzi/haaf3c">redis的高可用方案</a></li></ul><h2 id="分布式事务的实现"><a href="#分布式事务的实现" class="headerlink" title="分布式事务的实现"></a>分布式事务的实现</h2><ul><li><a href="../../../md/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1">分布式事务</a>  </li><li><a href="https://www.yuque.com/jiufenshiren/ra5mzi/fwl3rv">分布式事务</a></li></ul><h2 id="syncnorized和ReentrantLock的区别？"><a href="#syncnorized和ReentrantLock的区别？" class="headerlink" title="syncnorized和ReentrantLock的区别？"></a>syncnorized和ReentrantLock的区别？</h2><ul><li><a href="https://www.yuque.com/jiufenshiren/ra5mzi/rc3ofp">syncnorized</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;面经&quot;&gt;&lt;a href=&quot;#面经&quot; class=&quot;headerlink&quot; title=&quot;面经&quot;&gt;&lt;/a&gt;面经&lt;/h1&gt;</summary>
    
    
    
    <category term="面经" scheme="https://linqiankun.github.io/hexoblog/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    <category term="answer" scheme="https://linqiankun.github.io/hexoblog/categories/%E9%9D%A2%E7%BB%8F/answer/"/>
    
    
    <category term="面经" scheme="https://linqiankun.github.io/hexoblog/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>同花顺一面面经</title>
    <link href="https://linqiankun.github.io/hexoblog/%E9%9D%A2%E7%BB%8F/answer/%E5%90%8C%E8%8A%B1%E9%A1%BA%E4%B8%80%E9%9D%A2%E9%9D%A2%E7%BB%8F/"/>
    <id>https://linqiankun.github.io/hexoblog/%E9%9D%A2%E7%BB%8F/answer/%E5%90%8C%E8%8A%B1%E9%A1%BA%E4%B8%80%E9%9D%A2%E9%9D%A2%E7%BB%8F/</id>
    <published>2021-07-21T01:49:24.000Z</published>
    <updated>2021-07-27T09:12:20.643Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h1><span id="more"></span><p>写面经，攒人品</p><ol><li>自我介绍</li><li>jvm<ol><li>堆内存溢出<ol><li>怎么快速的堆内存溢出</li><li>溢出怎么防止</li><li>为什么会堆内存溢出</li><li>不段创建String对象，和不断创建线程造成溢出的区别？</li><li>怎么分析，dump内存文件</li><li>分析hprof文件，有那些内容</li></ol></li><li>栈指针溢出<ol><li>怎么快速的栈指针溢出</li><li>怎么防止</li><li>为什么会栈指针溢出</li></ol></li><li>垃圾回收器<ol><li>你们用的垃圾回收器</li><li>你知道的垃圾回收器</li><li>讲一讲过程，区别（CMS，G1）</li></ol></li></ol></li><li>redis分布式锁实现</li><li>mysql索引，为什么需要索引，自己的理解</li><li>mysql索引的数据结构</li><li>你们数据量级，一次处理的数据量</li><li>线程池，几个核心参数的作用，不背原理</li><li>hashmap和hashtable的区别</li><li>dubbo如何实现高可用的</li><li>反问</li></ol><hr><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><h2 id="redis分布式锁的实现"><a href="#redis分布式锁的实现" class="headerlink" title="redis分布式锁的实现"></a>redis分布式锁的实现</h2><ul><li><a href="../../../md/redis/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81">reids分布式锁</a></li><li><a href="../../../md/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81">分布式锁</a></li></ul><h2 id="mysql索引，为什么需要索引"><a href="#mysql索引，为什么需要索引" class="headerlink" title="mysql索引，为什么需要索引"></a>mysql索引，为什么需要索引</h2><ul><li><a href="https://www.yuque.com/jiufenshiren/ra5mzi/aoz98d">mysql索引</a></li><li><a href="../../../md/mysql/%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9">索引的优缺点</a></li></ul><p>&emsp;&emsp;mysql索引的最大最用就在于提高查询效率，原理在数据结构中，索引在提高查询效率的同时降低了修改的效率。  </p><h2 id="mysql索引的数据结构"><a href="#mysql索引的数据结构" class="headerlink" title="mysql索引的数据结构"></a>mysql索引的数据结构</h2><p>&emsp;&emsp;索引数据的组织结构和数据的组织结构是一样的，都是B+树的结构，区别在于他们的叶子节点所存储的数据，数据存储文件中叶子节点中存储着主键索引和表中的数据，而索引保存文件中，叶子节点则存储着索引字段以及对应的主键id值。<br>&emsp;&emsp;当通过素引进行查询时，会先根据索引查询出主键id的值，在在数据保存文件中，根据id查出所需要的数据，这个过程叫做回表。</p><h2 id="线程池理解（corepoolsize）"><a href="#线程池理解（corepoolsize）" class="headerlink" title="线程池理解（corepoolsize）"></a>线程池理解（corepoolsize）</h2><ul><li><a href="../../../md/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/threadpool">threadpool</a></li><li><a href="https://www.yuque.com/jiufenshiren/ra5mzi/egl1t0">threadpool</a><br>&emsp;&emsp;个人理解，核心线程数，就相当于车间里面的流水线数，就是正常情况下运行的流水线数，最大的线程数，就是再有紧急订单的情况下，我们在正常的流水线上，扩充到的流水线数。</li></ul><h2 id="hashmap和hashtable"><a href="#hashmap和hashtable" class="headerlink" title="hashmap和hashtable"></a>hashmap和hashtable</h2><p>&emsp;&emsp;hashmap和hashtable的区别有几点：</p><ul><li>继承和实现方式不同<ul><li>hashmap实现的是map接口</li><li>hashtable实现的是map接口继承的Dictionary类</li></ul></li><li>线程安全不同<ul><li>hashmap线程不安全</li><li>hashtable线程安全，在每个方法中都加入Synchronize方法。</li></ul></li><li>对null的处理不同<ul><li>hashtable键与值均不允许null</li><li>hashmap均可以null，null为键只会有一个</li></ul></li><li>支持的遍历种类不同<ul><li>Hashtable、HashMap都使用了Iterator。</li><li>而由于历史原因，Hashtable还使用了Enumeration的方式 。</li></ul></li><li>通过Iterator迭代器遍历时，遍历的顺序不同<ul><li>hashmap采用fail-fast机制</li><li>hashtable在1.8以后才用了fail-fast机制</li></ul></li><li>容量的初始值和增加方式都不一样<ul><li>hashmap初始16，扩容为2倍</li><li>hashtable为11，扩容为2*N+1</li></ul></li><li>添加key-value时的hash值算法不同<ul><li>haspmap采用key的hashcode确定位置</li><li>hashtable采用对象的hashcode，然后对长度才用除留余数法确定位置</li></ul></li></ul><h2 id="dubbo如何实现高可用"><a href="#dubbo如何实现高可用" class="headerlink" title="dubbo如何实现高可用"></a>dubbo如何实现高可用</h2><p>&emsp;&emsp;dubbo通过一系列手段实现了，高可用。</p><ul><li>zookeeper宕机与dubbo直连<ul><li>zookeeper注册中心宕机，还可以消费dubbo暴露的服务<ul><li>监控中心宕掉不影响使用，只是丢失部分采样数据</li><li>数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务</li><li>注册中心对等集群，任意一台宕掉后，将自动切换到另一台</li><li>注册中心全部宕机后，可以通过本地缓存进行通信，（直连）</li><li>服务提供者无状态，任意一台宕掉后，不影响使用</li><li>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</li></ul></li></ul></li><li>集群下的负载均衡<ul><li>带权重的随机</li><li>带权重的轮询</li><li>最少活跃数</li><li>一致性hash</li></ul></li><li>服务降级</li><li>集群容错机制<ul><li>Failover Cluster：失败自动切换</li><li>Failfast Cluster：快速失败，失败则立即报错</li><li>Failsafe Cluster：安全失败，失败就会忽略</li><li>Failback Cluster：失败自动恢复，会定时重发</li><li>Forking Cluster：并行调用，只需一个成功返回</li><li>Broadcast Cluster：广播调用，逐个调用每个提供者，任意一台报错则报错</li></ul></li></ul><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h3 id="堆内存溢出"><a href="#堆内存溢出" class="headerlink" title="堆内存溢出"></a>堆内存溢出</h3><h4 id="怎么快速的堆内存溢出？"><a href="#怎么快速的堆内存溢出？" class="headerlink" title="怎么快速的堆内存溢出？"></a>怎么快速的堆内存溢出？</h4><p>&emsp;&emsp;通过jvm参数去设置堆内存大小，然后再循环里面不断的创建线程，直到报OutOfMemory异常。</p><h4 id="堆内存溢出怎么防止？"><a href="#堆内存溢出怎么防止？" class="headerlink" title="堆内存溢出怎么防止？"></a>堆内存溢出怎么防止？</h4><p>&emsp;&emsp;最直接的办法就是直接调整堆内存的大小，也有一写在编写代码过程中注意的，防止内存溢出：</p><ul><li>尽早释放无用对象的引用</li><li>程序进行字符串处理时，尽量避免使用String，而应该使用StringBuffer</li><li>尽量少用静态变量（全局的，存在方法区，不会被回收）</li><li>避免集中创建对象，尤其是大对象，如果可以的话尽量使用流操作</li><li>尽量运用对象池技术以提高系统性能</li><li>不要在经常调用的方法中创建对象，尤其忌讳在循环中创建对象</li><li>优化配置<ul><li>从代码层面进行优化完善，尽量避免该情况发生</li><li>调整优化服务器配置：<ul><li>设置-Xms、-Xmx等</li><li>设置NewSize、MaxNewSize相等</li><li>设置Heap size，PermGen space</li></ul></li></ul></li></ul><p>&emsp;&emsp;可以通过一些手段保证代码安全：</p><ul><li>是否应用中的类中和引用变量过多使用了Static修饰</li><li>是否应用中使用了大量的递归或无限递归（递归中创建对象）</li><li>是否App中使用了大量循环或死循环（循环中创建对象）</li><li>检查应用中是否使用了向数据库查询所有记录的方法</li><li>检查是否有数组，List，Map中存放的是对象的引用而不是对象（这些引用会使得对象无法被释放）</li><li>检查是否使用了“非字面量字符串进行+”的操作，String对象每次+</li></ul><h4 id="为什么会堆内存溢出？"><a href="#为什么会堆内存溢出？" class="headerlink" title="为什么会堆内存溢出？"></a>为什么会堆内存溢出？</h4><p>&emsp;&emsp;内存大小不够；是指程序在申请内存时，没有足够的内存空间供其使用，出现out of memory。</p><h4 id="不断创建String和不断创建线程造成内存溢出的区别？"><a href="#不断创建String和不断创建线程造成内存溢出的区别？" class="headerlink" title="不断创建String和不断创建线程造成内存溢出的区别？"></a>不断创建String和不断创建线程造成内存溢出的区别？</h4><p>&emsp;&emsp;本质上，创建String就是创建了一个对象，分配了一块内存空间，而创建线程，则也会创建线程对象（Thread类的对象），区别在于创建线程的对象中，会包含一些线程的相关信息，也就是区别在线程对象的信息和普通对象的信息不同。</p><h4 id="怎么分析，dump内存文件"><a href="#怎么分析，dump内存文件" class="headerlink" title="怎么分析，dump内存文件"></a>怎么分析，dump内存文件</h4><p>&emsp;&emsp;一般有两种方法，自动和手动。</p><ul><li>jvm参数：-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/home/admin/logs/java.hprof</li><li>jmap -dump:format=b,file=/home/admin/logs/heap.hprof javapid</li></ul><p>&emsp;&emsp;dump内存文件后，可以通过一些工具进行分析。</p><ul><li>mat</li><li>visual VM</li><li>JProfiler</li></ul><h3 id="栈指针溢出"><a href="#栈指针溢出" class="headerlink" title="栈指针溢出"></a>栈指针溢出</h3><h4 id="怎么快速栈指针溢出？"><a href="#怎么快速栈指针溢出？" class="headerlink" title="怎么快速栈指针溢出？"></a>怎么快速栈指针溢出？</h4><p>&emsp;&emsp;通过死循环内调用方法，或者递归没有出口，无限递归，造成StackOverFlow异常。</p><h4 id="怎么防止栈指针溢出？"><a href="#怎么防止栈指针溢出？" class="headerlink" title="怎么防止栈指针溢出？"></a>怎么防止栈指针溢出？</h4><p>&emsp;&emsp;通过一些判断，保证代码安全，破坏栈指针溢出的条件：</p><ul><li>是否有递归调用</li><li>是否有大量循环或者死循环</li><li>全局变量是否过多</li><li>数组、List、map数据是否过大</li><li>使用DDMS工具进行查找大概出现栈溢出的位置</li></ul><h4 id="为什么为栈指针溢出？"><a href="#为什么为栈指针溢出？" class="headerlink" title="为什么为栈指针溢出？"></a>为什么为栈指针溢出？</h4><p>&emsp;&emsp;栈指针溢出其实可以分为两种，不过一般说的是第一种，本质都是由内存不足引起的。</p><ul><li>线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError</li><li>虚拟机在扩展栈深度时无法申请到足够的内存空间，将抛出OutOfMemberError</li></ul><h3 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h3><h4 id="你们用的垃圾回收器？你知道的垃圾回收器？CMS和G1的区别？"><a href="#你们用的垃圾回收器？你知道的垃圾回收器？CMS和G1的区别？" class="headerlink" title="你们用的垃圾回收器？你知道的垃圾回收器？CMS和G1的区别？"></a>你们用的垃圾回收器？你知道的垃圾回收器？CMS和G1的区别？</h4><ul><li><a href="../../../md/jvm/JVM%E2%80%94GC">JVM-GC</a></li></ul><hr><h1 id="参考文献-amp-鸣谢"><a href="#参考文献-amp-鸣谢" class="headerlink" title="参考文献 &amp; 鸣谢"></a>参考文献 &amp; 鸣谢</h1><ul><li><a href="https://www.cnblogs.com/treasure716/p/10019506.html">如何避免内存泄漏、溢出</a></li><li><a href="https://blog.csdn.net/u011983531/article/details/63250882">写代码实现堆溢出、栈溢出、永久代溢出、直接内存溢出</a></li><li><a href="https://blog.csdn.net/hukuncd/article/details/105528122">java内存溢出、栈溢出的原因与排查方法</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;面经&quot;&gt;&lt;a href=&quot;#面经&quot; class=&quot;headerlink&quot; title=&quot;面经&quot;&gt;&lt;/a&gt;面经&lt;/h1&gt;</summary>
    
    
    
    <category term="面经" scheme="https://linqiankun.github.io/hexoblog/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="面经" scheme="https://linqiankun.github.io/hexoblog/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>禾连科技一面面经</title>
    <link href="https://linqiankun.github.io/hexoblog/%E9%9D%A2%E7%BB%8F/answer/%E7%A6%BE%E8%BF%9E%E7%A7%91%E6%8A%80%E4%B8%80%E9%9D%A2%E9%9D%A2%E7%BB%8F/"/>
    <id>https://linqiankun.github.io/hexoblog/%E9%9D%A2%E7%BB%8F/answer/%E7%A6%BE%E8%BF%9E%E7%A7%91%E6%8A%80%E4%B8%80%E9%9D%A2%E9%9D%A2%E7%BB%8F/</id>
    <published>2021-07-15T11:38:41.000Z</published>
    <updated>2021-08-12T08:13:45.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h1><span id="more"></span><p>写面经，攒人品</p><ol><li>项目介绍</li><li>用到那些jdk版本？</li><li>1.8有哪些新特性？</li><li>Stream API用到那些方法？</li><li>Stream API并行情况？</li><li>用到那些集合？</li><li>用到那些线程安全的集合？</li><li>threadlocal用在什么场景？</li><li>threadlocal结构？</li><li>子线程能否拿到主线程threadlocal的内容？怎么拿？</li><li>为什么用dubbo？</li><li>dubbo用什么做注册中心？</li><li>还有那些注册中心？</li><li>dubbo启动扫描服务的过程？</li><li>同一个dubbo服务，不同的用户要使用，dubbo怎么做用户区分？</li><li>索引失效的情况？</li><li>like对字段后半截查询（前半截模糊，后半截精确），如何优化？</li><li>为什么有young gc和old gc？</li><li>标记清除算法用在那个阶段？</li><li>反射有那些方法得到一个类？</li><li>Class.forName和ClassLoader.loadclass的区别？</li><li>为什么要用Class.forName？使用场景？</li><li>为什么用rocketmq？</li><li>rocketmq用在什么场景？</li><li>分布式锁怎么实现的？为什么没有用成熟的解决方案？</li><li>反问</li></ol><hr><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><h2 id="jdk1-8有哪些新特性？"><a href="#jdk1-8有哪些新特性？" class="headerlink" title="jdk1.8有哪些新特性？"></a>jdk1.8有哪些新特性？</h2><p>&emsp;&emsp;1.8中添加了一些新的特性。</p><ul><li>Lambda表达式</li><li>函数式接口</li><li>方法引用和构造器引用（前三个一般联合使用）</li><li>Stream API</li><li>接口中的默认方法和静态方法</li><li>LocalDate API</li><li>Optional类</li><li>Base64 API</li><li>数组并行操作</li><li>永久代移除，增加元空间</li></ul><h2 id="Stream-API用到那些方法？"><a href="#Stream-API用到那些方法？" class="headerlink" title="Stream API用到那些方法？"></a>Stream API用到那些方法？</h2><ul><li><a href="https://mp.weixin.qq.com/s/jUBKPGGgF0mkuxQ6RBeYyA">20 个实例玩转 Java 8 Stream</a></li><li><a href="https://mp.weixin.qq.com/s/Vu5LMjlBMXtmdFk2QfnFtw">深度掌握java stream 流操作，让你的代码高出一个逼格！</a></li></ul><p><img src="https://gitee.com/linqiankun/picurl/raw/master/java/StreamAPI.jpg" alt="StreamAPI"><br><img src="https://gitee.com/linqiankun/picurl/raw/master/java/StreamAPI2.png" alt="StreamAPI"></p><h2 id="Stream-API并行情况？"><a href="#Stream-API并行情况？" class="headerlink" title="Stream API并行情况？"></a>Stream API并行情况？</h2><ul><li><a href="https://mp.weixin.qq.com/s/7J56xP1DVXa8H1kH32QFhA">你了解 JDK 8 Stream 数据流效率吗？千万级数据量性能如何？</a></li><li><a href="https://mp.weixin.qq.com/s/EOw9zVIlC6MnEaGCHqca6A">Java8 Stream 数据流，大数据量下的性能效率怎么样？</a></li><li><a href="https://mp.weixin.qq.com/s/ESmH1vLGENEop-C1R2HCAQ">JDK 8 Stream 数据流效率怎么样？</a></li></ul><h2 id="常用的有哪些集合？"><a href="#常用的有哪些集合？" class="headerlink" title="常用的有哪些集合？"></a>常用的有哪些集合？</h2><p>&emsp;&emsp;常用的集合主要可以分为4类，map、set、list和vector，hashtable等其他的。  </p><p><img src="https://gitee.com/linqiankun/picurl/raw/master/java/%E9%9B%86%E5%90%881.jpg" alt="集合集成关系图"></p><h2 id="常用的并发安全集合集合有哪些？"><a href="#常用的并发安全集合集合有哪些？" class="headerlink" title="常用的并发安全集合集合有哪些？"></a>常用的并发安全集合集合有哪些？</h2><ul><li><a href="https://www.jianshu.com/p/b8544e2c5fdb">多线程并发下的线程安全的集合类的使用</a></li></ul><p>&emsp;&emsp;并发安全的集合有多种，也可以将不安全的集合转化为并发安全的集合。</p><ul><li>ConcurrentHashMap</li><li>HashTable</li><li>Collections.synchronizedCollection()方法转换</li><li>StringBuffer</li></ul><h2 id="threadlocal用在什么场景？"><a href="#threadlocal用在什么场景？" class="headerlink" title="threadlocal用在什么场景？"></a>threadlocal用在什么场景？</h2><p>&emsp;&emsp;ThreadLocal有两大典型使用场景。</p><ul><li><strong>场景1：</strong> 每个线程需要一个独享的对象（通常是工具类，典型需要使用的类有SimpleDateFormat和Random<blockquote><p>SimpleDateFormat这种每个线程都需要使用，但是线程不安全的类</p></blockquote></li><li><strong>场景2：</strong> 每个线程内需要保存全局变量（例如在拦截器中获取用户信息），可以让不同方法直接使用，避免参数传递的麻烦。</li></ul><h2 id="threadlocal结构？"><a href="#threadlocal结构？" class="headerlink" title="threadlocal结构？"></a>threadlocal结构？</h2><p>&emsp;&emsp;threadLocal底层采用了一个和线程绑定的ThreadLocalMap，这个map与线程绑定，每个线程都是自己，对自己的进行操作。<br>&emsp;&emsp;ThreadLocalMap的底层则是一个Entry数组，用threadlocal作为Entry的key，而值则是由我们控制。</p><h2 id="子线程能否拿到主线程threadlocal的内容？怎么拿？"><a href="#子线程能否拿到主线程threadlocal的内容？怎么拿？" class="headerlink" title="子线程能否拿到主线程threadlocal的内容？怎么拿？"></a>子线程能否拿到主线程threadlocal的内容？怎么拿？</h2><p>&emsp;&emsp;默认情况下，子线程是无法拿到主线程的ThreadLocal中的信息的，可以通过手动传递，ThreadLocal有一个子类，可以使用<code>InheritableThreadLocal</code>，可以进行父子线程传递数据。</p><h2 id="为什么用dubbo？"><a href="#为什么用dubbo？" class="headerlink" title="为什么用dubbo？"></a>为什么用dubbo？</h2><ul><li><a href="../../../md/rpc/dubbo/dubbo%E5%9F%BA%E7%A1%80%E5%8F%8A%E4%BB%8B%E7%BB%8D">dubbo基础及介绍</a></li></ul><h2 id="dubbo用什么做注册中心？"><a href="#dubbo用什么做注册中心？" class="headerlink" title="dubbo用什么做注册中心？"></a>dubbo用什么做注册中心？</h2><p>&emsp;&emsp;dubbo的注册中心有四种：</p><ul><li><p>Nacos注册中心</p></li><li><p>Multicast注册中心</p><blockquote><p>不需要启动任何中心节点，只要广播地址一样，就可以互相发现。<br>为了减少广播量，Dubbo缺省使用单播发送提供者地址信息给消费者，如果一个机器上同时启了多个消费者进程，消费者需声明unicast=false，否则只会有一个消费者能收到消息；当服务者和消费者运行在同一台机器上，消费者同样需要声明unicast=false，否则消费者无法收到消息，导致<code>No provider available for the service</code>异常。</p></blockquote></li><li><p>Zookeeper注册中心</p></li><li><p>Redis注册中心</p><blockquote><p>从2.1.0版本开始支持。<br>使用Redis的Key/Map结构存储数据结构。<br>使用Redis的Publish/Subscribe事件通知数据变更。</p></blockquote></li><li><p>Simple注册中心</p><blockquote><p>Simple注册中心本身就是一个普通的Dubbo服务，可以减少第三方依赖，使整体通讯方式一致。<br>不支持集群</p></blockquote></li><li><p><a href="https://dubbo.apache.org/zh/docs/v2.7/user/references/registry/">https://dubbo.apache.org/zh/docs/v2.7/user/references/registry/</a></p></li></ul><h2 id="dubbo启动扫描服务的过程？"><a href="#dubbo启动扫描服务的过程？" class="headerlink" title="dubbo启动扫描服务的过程？"></a>dubbo启动扫描服务的过程？</h2><ul><li><a href="../../../md/rpc/dubbo/dubbo%E6%9C%8D%E5%8A%A1%E5%BC%95%E5%85%A5%E6%B5%81%E7%A8%8B">dubbo服务发现</a></li><li><a href="../../../md/rpc/dubbo/dubbo%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B">dubbo服务调用过程</a></li></ul><h2 id="同一个dubbo服务，不同的用户要使用，dubbo怎么做用户区分？"><a href="#同一个dubbo服务，不同的用户要使用，dubbo怎么做用户区分？" class="headerlink" title="同一个dubbo服务，不同的用户要使用，dubbo怎么做用户区分？"></a>同一个dubbo服务，不同的用户要使用，dubbo怎么做用户区分？</h2><p>&emsp;&emsp;对于这种情况，可以通过对相同的接口采用不同的版本进行区分。</p><h2 id="索引失效的情况？"><a href="#索引失效的情况？" class="headerlink" title="索引失效的情况？"></a>索引失效的情况？</h2><ul><li><a href="https://www.yuque.com/jiufenshiren/ra5mzi/aoz98d#1ETQP">索引失效的情况</a></li></ul><h2 id="like对字段后半截查询（前半截模糊，后半截精确），如何优化？"><a href="#like对字段后半截查询（前半截模糊，后半截精确），如何优化？" class="headerlink" title="like对字段后半截查询（前半截模糊，后半截精确），如何优化？"></a>like对字段后半截查询（前半截模糊，后半截精确），如何优化？</h2><p>&emsp;&emsp;一般而言在后半段模糊的情况下，like中的值可以根据前半段进行索引匹配，提高效率。<br>&emsp;&emsp;对于前半段模糊的情况，可以考虑使用覆盖索引，对like中的值和一个其他字段建立复合索引。<br>&emsp;&emsp;也考虑使用函数达到优化的效果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span> LOCATE(<span class="string">&#x27;substr&#x27;</span>,str,pos)：返回substr在(pos后)str中第一次出现的位置，如果substr在str中不存在，返回值为<span class="number">0</span>。</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> `<span class="keyword">column</span>` <span class="keyword">FROM</span> `<span class="keyword">table</span>` <span class="keyword">WHERE</span> LOCATE(<span class="string">&#x27;keyword&#x27;</span>, `field`)<span class="operator">&gt;</span><span class="number">0</span></span><br><span class="line"><span class="operator">-</span> <span class="built_in">POSITION</span>(<span class="string">&#x27;substr&#x27;</span> <span class="keyword">IN</span> `field`)</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> `<span class="keyword">column</span>` <span class="keyword">FROM</span> `<span class="keyword">table</span>` <span class="keyword">WHERE</span> <span class="built_in">POSITION</span>(<span class="string">&#x27;keyword&#x27;</span> <span class="keyword">IN</span> `filed`)</span><br><span class="line"><span class="operator">-</span> INSTR(`str`,<span class="string">&#x27;substr&#x27;</span>)</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> `<span class="keyword">column</span>` <span class="keyword">FROM</span> `<span class="keyword">table</span>` <span class="keyword">WHERE</span> INSTR(`field`, <span class="string">&#x27;keyword&#x27;</span> )<span class="operator">&gt;</span><span class="number">0</span> </span><br><span class="line"><span class="operator">-</span> FIND_IN_SET(str1,str2)：返回str2中str1所在的位置索引，其中str2必须以&quot;,&quot;分割开。</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `person` <span class="keyword">WHERE</span> FIND_IN_SET(<span class="string">&#x27;keyword&#x27;</span>,`field`);</span><br></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/soinice/article/details/98476139">MySQL - 如何优化模糊查询（like 模糊查询)</a></li><li><a href="https://blog.csdn.net/UFO___/article/details/81164996">https://blog.csdn.net/UFO___/article/details/81164996</a></li></ul><h2 id="为什么有young-gc和old-gc？"><a href="#为什么有young-gc和old-gc？" class="headerlink" title="为什么有young gc和old gc？"></a>为什么有young gc和old gc？</h2><p>&emsp;&emsp;GC是为了清理JVM在运行中产生的垃圾内存，回收使用。因为GC的效率问题，才会分为young gc和old gc。<br>&emsp;&emsp;相对而言，young gc速度快、次数多，而old gc速度慢、次数少、会停止任务的执行。  </p><ul><li><a href="../../../md/jvm/JVM%E2%80%94GC">GC</a></li><li><a href="https://blog.csdn.net/wildwolf_001/article/details/108873331">Minor GC、Young GC、Full GC、Old GC、Major GC、Mixed GC傻傻分不清</a></li></ul><h2 id="标记清除算法用在什么阶段？"><a href="#标记清除算法用在什么阶段？" class="headerlink" title="标记清除算法用在什么阶段？"></a>标记清除算法用在什么阶段？</h2><p>&emsp;&emsp;标记清除算法一般用在老年代的垃圾回收，主要用在CMS垃圾回收器。</p><h2 id="Class-forName和ClassLoader-loadclass的区别？"><a href="#Class-forName和ClassLoader-loadclass的区别？" class="headerlink" title="Class.forName和ClassLoader.loadclass的区别？"></a>Class.forName和ClassLoader.loadclass的区别？</h2><p>&emsp;&emsp;两者都是加载类的方法，ClassLoader.loadclass中会又三种类加载器，当前类加载器，指定类加载器，线程上下文类加载器。<br>&emsp;&emsp;Class.forName则是通过当前类加载器加载类的。底层会采用ClassLoader.loadclass。<br>&emsp;&emsp;Class.forName加载类的同时进行了初始化工作，ClassLoader.loadclass只加载进了内存中，ClassLoader.loadclass加载的类在用new关键字构造对象时才会初始化。<br>&emsp;&emsp;jdbc中规定，加载的同时需要将类注册进DriverManager中，ClassLoader.loadclass中没有类进行初始化，所以无法注册，不能使用。</p><ul><li><a href="https://www.jianshu.com/p/aedee0e14319">Class.forName和ClassLoader.loadClass</a></li><li><a href="https://blog.csdn.net/a24b86/article/details/119112800">应用在JDBC的Class.forName和ClassLoader.loadClass区别</a></li><li><a href="https://www.cnblogs.com/zeng1994/p/81976a2ea470861e34a4223b7561a970.html">Class.forName() 与 ClassLoader.loadClass()的区别</a></li></ul><h2 id="为什么要用Class-forName？使用场景？"><a href="#为什么要用Class-forName？使用场景？" class="headerlink" title="为什么要用Class.forName？使用场景？"></a>为什么要用Class.forName？使用场景？</h2><p>&emsp;&emsp;<code>Class.forName()</code>，是为了动态加载类，在数据库驱动场景中使用较多，一般在动态加载类后还需要调用<code>newInstance()</code>方法来实例化对象。<br>&emsp;&emsp;<code>Class.forName()</code>返回的是类，<code>newInstance()</code>返回的是实例化的对象。<br>&emsp;&emsp;<code>newInstance()</code>方法返回的对象是弱类型，而<code>new</code>返回的对象是强类型。<br>&emsp;&emsp;java中有三种获得类的方法：</p><ul><li>Class Object = object.getClass();</li><li>Class Object = Object.class;</li><li>Class Object = Class.forName(“java.lang.Object”);</li></ul><h2 id="为什么使用rocketmq？rocketmq用在什么场景？"><a href="#为什么使用rocketmq？rocketmq用在什么场景？" class="headerlink" title="为什么使用rocketmq？rocketmq用在什么场景？"></a>为什么使用rocketmq？rocketmq用在什么场景？</h2><ul><li><a href="../../../categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/">rocketmq分类</a></li></ul><h2 id="分布式锁怎么实现的？为什么没有用成熟的解决方案？"><a href="#分布式锁怎么实现的？为什么没有用成熟的解决方案？" class="headerlink" title="分布式锁怎么实现的？为什么没有用成熟的解决方案？"></a>分布式锁怎么实现的？为什么没有用成熟的解决方案？</h2><ul><li><a href="../../../md/redis/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81">redis分布式</a></li><li><a href="../../../md/zookeeper/zookeeper%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81">zookeeper实现分布式锁</a></li><li><a href="../../../md/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81">分布式锁</a></li></ul><hr><h1 id="参考文献-amp-鸣谢"><a href="#参考文献-amp-鸣谢" class="headerlink" title="参考文献 &amp; 鸣谢"></a>参考文献 &amp; 鸣谢</h1><ul><li><a href="https://www.jianshu.com/p/b8544e2c5fdb">多线程并发下的线程安全的集合类的使用</a></li><li><a href="https://mp.weixin.qq.com/s/7J56xP1DVXa8H1kH32QFhA">你了解 JDK 8 Stream 数据流效率吗？千万级数据量性能如何？</a></li><li><a href="https://mp.weixin.qq.com/s/EOw9zVIlC6MnEaGCHqca6A">Java8 Stream 数据流，大数据量下的性能效率怎么样？</a></li><li><a href="https://mp.weixin.qq.com/s/ESmH1vLGENEop-C1R2HCAQ">JDK 8 Stream 数据流效率怎么样？</a></li><li><a href="https://mp.weixin.qq.com/s/jUBKPGGgF0mkuxQ6RBeYyA">20 个实例玩转 Java 8 Stream</a></li><li><a href="https://mp.weixin.qq.com/s/Vu5LMjlBMXtmdFk2QfnFtw">深度掌握java stream 流操作，让你的代码高出一个逼格！</a></li><li><a href="https://blog.csdn.net/ZytheMoon/article/details/89715618">Java版本：JDK8的十大新特性介绍</a></li><li><a href="https://blog.csdn.net/qq_29411737/article/details/80835658">JDK1.8 新特性（全）</a></li><li><a href="https://blog.csdn.net/wildwolf_001/article/details/108873331">Minor GC、Young GC、Full GC、Old GC、Major GC、Mixed GC傻傻分不清</a></li><li><a href="https://www.jianshu.com/p/aedee0e14319">Class.forName和ClassLoader.loadClass</a></li><li><a href="https://blog.csdn.net/a24b86/article/details/119112800">应用在JDBC的Class.forName和ClassLoader.loadClass区别</a></li><li><a href="https://www.cnblogs.com/zeng1994/p/81976a2ea470861e34a4223b7561a970.html">Class.forName() 与 ClassLoader.loadClass()的区别</a></li><li><a href="https://dubbo.apache.org/zh/docs/v2.7/user/references/registry/">https://dubbo.apache.org/zh/docs/v2.7/user/references/registry/</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;面经&quot;&gt;&lt;a href=&quot;#面经&quot; class=&quot;headerlink&quot; title=&quot;面经&quot;&gt;&lt;/a&gt;面经&lt;/h1&gt;</summary>
    
    
    
    <category term="面经" scheme="https://linqiankun.github.io/hexoblog/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    <category term="answer" scheme="https://linqiankun.github.io/hexoblog/categories/%E9%9D%A2%E7%BB%8F/answer/"/>
    
    
    <category term="面经" scheme="https://linqiankun.github.io/hexoblog/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>redis底层采用的数据结构</title>
    <link href="https://linqiankun.github.io/hexoblog/md/redis/redis%E5%BA%95%E5%B1%82%E9%87%87%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://linqiankun.github.io/hexoblog/md/redis/redis%E5%BA%95%E5%B1%82%E9%87%87%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2021-07-15T10:03:30.000Z</published>
    <updated>2021-07-21T08:53:37.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>&emsp;&emsp;redis是用C语言编写的，底层自己设计了一些数据结构，用这些数据结构完成了对外功能的提供。常说的redis可以存储的几种数据结构，底层就是采用这些数据结构实现的。  </p><span id="more"></span><p>&emsp;&emsp;redis底层的数据结构有：</p><ul><li>SDS：简单动态字符串</li><li>list：链表</li><li>dict：字典</li><li>skiplist：跳跃表</li><li>intset：整数集合</li><li>ziplist：压缩列表</li></ul><hr><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="SDS：简单动态字符串"><a href="#SDS：简单动态字符串" class="headerlink" title="SDS：简单动态字符串"></a>SDS：简单动态字符串</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>&emsp;&emsp;redis采用C语言编写，但是redis中的字符串并没有使用C语言提供的字符串，而是自己定义了一种SDS的结构体，用来保存字符串。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> &#123;</span>  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// buf 中已占用空间的长度  </span></span><br><span class="line">    <span class="keyword">int</span> len;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// buf 中剩余可用空间的长度  </span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">free</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 数据空间  </span></span><br><span class="line">    <span class="keyword">char</span> buf[];  </span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure><ul><li>len变量：用于记录buf中已经使用的空间长度</li><li>free变量：用于记录buf中还空余的空间</li><li>buf：字符数组，用于记录我们的字符串</li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>&emsp;&emsp;传统的C语言中，采用长度为N+1的字符数组来保存长度为N的字符串，这样做在获取长度，字符串扩展等操作中效率缓慢。<br>&emsp;&emsp;SDS与传统的C语言字符串有一些优点：</p><ul><li>获取字符串长度快速O(1)与O(n)</li><li>杜绝缓冲区溢出<ul><li>C语言不记录字符串长度，除了获取的时候复杂度高以外，还容易导致缓冲区溢出。修改前面的字符串，不重新分配空间的情况下，有可能覆盖后面的字符串。</li><li>SDS中不会发生溢出，当我们需要对一个SDS 进行修改的时候，redis 会在执行拼接操作之前，预先检查给定SDS 空间是否足够，如果不够，会先拓展SDS 的空间，然后再执行拼接操作。</li></ul></li><li>减少修改字符串时带来的内存重新分配次数<ul><li>字符串拼接会产生字符串的内存空间的扩充，在拼接的过程中，原来的字符串的大小很可能小于拼接后的字符串的大小，那么这样的话，就会导致一旦忘记申请分配空间，就会导致内存的溢出。</li><li>字符串在进行收缩的时候，内存空间会相应的收缩，而如果在进行字符串的切割的时候，没有对内存的空间进行一个重新分配，那么这部分多出来的空间就成为了内存泄露。</li></ul></li><li>二进制安全<blockquote><p>&emsp;&emsp;字符串中的字符必须符合某种编码，并且除了字符串的末尾之外，字符串里面不能包含空字符，否则最先被程序读入的空字符将被误认为是字符串结尾，这些限制使得C字符串只能保存文本数据，而不能保存想图片，音频，视频，压缩文件这样的二进制数据。<br>&emsp;&emsp;但是在Redis中，不是靠空字符来判断字符串的结束的，而是通过len这个属性。那么，即便是中间出现了空字符对于SDS来说，读取该字符仍然是可以的。</p></blockquote></li><li>惰性空间释放<blockquote><p>通过len与free参数，减少了扩展与收缩操作的次数。</p></blockquote></li><li>兼容部分C语言字符串</li></ul><h2 id="List：链表"><a href="#List：链表" class="headerlink" title="List：链表"></a>List：链表</h2><p>&emsp;&emsp;链表提供了搞笑的节点重排能力，以及顺序性的节点访问方式，并且可以通过增删节点来灵活地调整链表的长度。<br>&emsp;&emsp;列表键的底层实现之一就是链表。当一个列表键包含了数量较多的元素，又或者列表中包含的元素都是比较长的字符串时，Redis就会使用链表作为列表键的底层实现。</p><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>&emsp;&emsp;链表的定义分为链表节点的定义和链表的定义。redis中的链表是一个双端链表。</p><p>&emsp;&emsp;链表节点的定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span>&#123;</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> * <span class="title">prev</span>;</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> * <span class="title">next</span>;</span></span><br><span class="line">      <span class="keyword">void</span> * value;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;链表的定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span>&#123;</span></span><br><span class="line">    <span class="comment">// 表头节点</span></span><br><span class="line">    listNode  * head;</span><br><span class="line">    <span class="comment">// 表尾节点</span></span><br><span class="line">    listNode  * tail;</span><br><span class="line">    <span class="comment">// 链表长度</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> len;</span><br><span class="line">    <span class="comment">// 节点值复制函数</span></span><br><span class="line">    <span class="keyword">void</span> *(*dup) (<span class="keyword">void</span> *ptr);</span><br><span class="line">    <span class="comment">// 节点值释放函数</span></span><br><span class="line">    <span class="keyword">void</span> (*<span class="built_in">free</span>) (<span class="keyword">void</span> *ptr);</span><br><span class="line">    <span class="comment">// 节点值对比函数</span></span><br><span class="line">    <span class="keyword">int</span> (*match)(<span class="keyword">void</span> *ptr, <span class="keyword">void</span> *key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>双端：链表节点带有prev 和next 指针，获取某个节点的前置节点和后置节点的时间复杂度都是O（N）</li><li>无环：表头节点的 prev 指针和表尾节点的next 都指向NULL，对立案表的访问时以NULL为截止</li><li>表头和表尾：因为链表带有head指针和tail 指针，程序获取链表头结点和尾节点的时间复杂度为O(1)</li><li>长度计数：链表中存有记录链表长度的属性 len</li><li>多态：链表节点使用 void* 指针来保存节点值，并且可以通过list 结构的dup 、 free、 match三个属性为节点值设置类型特定函数。</li></ul><h2 id="Dict：字典"><a href="#Dict：字典" class="headerlink" title="Dict：字典"></a>Dict：字典</h2><p>&emsp;&emsp;字典，又称为符号表（symbol table）、关联数组（associative array）或映射（map），是一种用于保存键值对的抽象数据结构。<br>&emsp;&emsp;在字典中，一个键（key）可以和一个值（value）进行关联，字典中的每个键都是独一无二的。在C语言中，并没有这种数据结构，但是Redis 中构建了自己的字典实现。</p><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>&emsp;&emsp;字典的定义分为三块，分别是字典定义，哈希表定义，哈希节点定义。</p><p>&emsp;&emsp;字典定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span></span><br><span class="line">    <span class="comment">// 类型特定函数</span></span><br><span class="line">    dictType *type;</span><br><span class="line">    <span class="comment">// 私有数据</span></span><br><span class="line">    <span class="keyword">void</span> *privedata;</span><br><span class="line">    <span class="comment">// 哈希表</span></span><br><span class="line">    dictht  ht[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">// rehash 索引</span></span><br><span class="line">    in trehashidx;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;哈希表定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line">   <span class="comment">//哈希表数组</span></span><br><span class="line">   dictEntry **table;</span><br><span class="line">   <span class="comment">//哈希表大小</span></span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">long</span> size;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//哈希表大小掩码，用于计算索引值</span></span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">long</span> sizemask;</span><br><span class="line">   <span class="comment">//该哈希表已有节点的数量</span></span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">long</span> used;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;哈希节点定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">typeof <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span>&#123;</span></span><br><span class="line">   <span class="comment">//键</span></span><br><span class="line">   <span class="keyword">void</span> *key;</span><br><span class="line">   <span class="comment">//值</span></span><br><span class="line">   <span class="class"><span class="keyword">union</span>&#123;</span></span><br><span class="line">      <span class="keyword">void</span> *val;</span><br><span class="line">      uint64_tu64;</span><br><span class="line">      int64_ts64;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;它们之间的结构关系如下图：</p><p><img src="https://gitee.com/linqiankun/picurl/raw/master/java/redis%E5%AD%97%E5%85%B8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt="redis字典的结构"></p><p>&emsp;&emsp;可以看出来，结构的后半程同hashmap的接口类似，同样也是采用了链地址法来解决hash冲突的问题。</p><h3 id="扩展与收缩"><a href="#扩展与收缩" class="headerlink" title="扩展与收缩"></a>扩展与收缩</h3><p>&emsp;&emsp;随着对哈希表的不断操作，哈希表保存的键值对会逐渐的发生改变，为了让哈希表的负载因子维持在一个合理的范围之内，我们需要对哈希表的大小进行相应的扩展或者压缩，这时候，我们可以通过 rehash（重新散列）操作来完成。<br>&emsp;&emsp;哈希表的空间分配规则：</p><ol><li>如果执行的是拓展操作，那么ht[1]的大小为第一个大于等于ht[0]的2的n次幂</li><li>如果执行的是收缩操作，那么ht[1] 的大小为第一个大于等于ht[0] 的2的n次幂</li></ol><p>&emsp;&emsp;扩展流程：</p><ol><li>ht[0]满数据的情况下</li><li>为ht[1]按照上面的逻辑分配空间</li><li>讲ht[0]的数据转移进ht[1]，这个过程中需要重新进行hash计算</li><li>将ht[0]释放，将ht[1]设置为新的ht[0]</li></ol><p>&emsp;&emsp;数据量较小的时候，可以通过这种方式进行扩容，实际情况下一般采用渐进式rehash。采用渐进式rehash 的好处在于它采取分而治之的方式，避免了集中式rehash 带来的庞大计算量。流程基本是：</p><ol><li>为ht[1] 分配空间，让字典同时持有ht[0]和ht[1]两个哈希表</li><li>在几点钟维持一个索引计数器变量rehashidx，并将它的值设置为0，表示rehash开始</li><li>在rehash进行期间，每次对字典执行CRUD操作时，程序除了执行指定的操作以外，还会将ht[0]中的数据rehash到ht[1]表中，并且将rehashidx加一</li><li>当ht[0]中所有数据转移到ht[1]中时，将rehashidx 设置成-1，表示rehash结束</li></ol><h2 id="SkipList：跳表"><a href="#SkipList：跳表" class="headerlink" title="SkipList：跳表"></a>SkipList：跳表</h2><p>&emsp;&emsp;跳跃表（skiplist）是一种有序数据结构，它通过在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的。跳跃表是一种随机化的数据,跳跃表以有序的方式在层次化的链表中保存元素，效率和平衡树媲美 ——查找、删除、添加等操作都可以在对数期望时间下完成，并且比起平衡树来说，跳跃表的实现要简单直观得多。<br>&emsp;&emsp;Redis 只在两个地方用到了跳跃表，一个是实现有序集合键，另外一个是在集群节点中用作内部数据结构。</p><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>&emsp;&emsp;跳跃表的定义分为两块，表定义和节点定义。<br>&emsp;&emsp;数据节点定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span>&#123;</span></span><br><span class="line">　　　<span class="comment">//层</span></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistLevel</span>&#123;</span></span><br><span class="line">　　　　　<span class="comment">//前进指针</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">forward</span>;</span></span><br><span class="line">　　　　<span class="comment">//跨度</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> span;</span><br><span class="line">    &#125; level[];</span><br><span class="line">　　<span class="comment">//后退指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">backward</span>;</span></span><br><span class="line">　　<span class="comment">//分值</span></span><br><span class="line">    <span class="keyword">double</span> score;</span><br><span class="line">　　<span class="comment">//成员对象</span></span><br><span class="line">    robj *obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>层：level数组可以包含多个元素，每个元素都包含一个指向其他节点的指针。</li><li>前进指针：用于指向表尾方向的前进指针</li><li>跨度：用于记录两个节点之间的距离</li><li>后退指针：用于从表尾向表头方向访问节点</li><li>分值和成员：跳跃表中的所有节点都按分值从小到大排序。成员对象指向一个字符串，这个字符串对象保存着一个SDS值</li></ul><p>&emsp;&emsp;跳跃表定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplist</span> &#123;</span></span><br><span class="line">     <span class="comment">//表头节点和表尾节点</span></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">header</span>,*<span class="title">tail</span>;</span></span><br><span class="line">     <span class="comment">//表中节点数量</span></span><br><span class="line">     <span class="keyword">unsigned</span> <span class="keyword">long</span> length;</span><br><span class="line">     <span class="comment">//表中层数最大的节点的层数</span></span><br><span class="line">     <span class="keyword">int</span> level;</span><br><span class="line"></span><br><span class="line">&#125;zskiplist;</span><br></pre></td></tr></table></figure><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul><li>跳跃表是有序集合的底层实现之一</li><li>主要有zskiplist 和zskiplistNode两个结构组成</li><li>每个跳跃表节点的层高都是1至32之间的随机数</li><li>在同一个跳跃表中，多个节点可以包含相同的分值，但每个节点的对象必须是唯一的</li><li>节点按照分值的大小从大到小排序，如果分值相同，则按成员对象大小排序</li></ul><h2 id="IntSet：整数集合"><a href="#IntSet：整数集合" class="headerlink" title="IntSet：整数集合"></a>IntSet：整数集合</h2><p>&emsp;&emsp;整数集合是集合建的底层实现之一，当一个集合中只包含整数，且这个集合中的元素数量不多时，redis就会使用整数集合intset作为集合的底层实现。<br>&emsp;&emsp;其实就是一个特殊的集合，里面存储的数据只能够是整数，并且数据量不能过大。</p><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">intset</span>&#123;</span></span><br><span class="line">    <span class="comment">//编码方式</span></span><br><span class="line">    <span class="keyword">uint32_t</span> enconding;</span><br><span class="line">   <span class="comment">// 集合包含的元素数量</span></span><br><span class="line">    <span class="keyword">uint32_t</span> length;</span><br><span class="line">    <span class="comment">//保存元素的数组    </span></span><br><span class="line">    <span class="keyword">int8_t</span> contents[];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>encoding：整数集合的编码方式</li><li>length：集合中的元素数量</li><li>contents：用于保存元素的数组</li></ul><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>&emsp;&emsp;intset 在默认情况下会帮我们设定整数集合中的编码方式，但是当我们存入的整数不符合整数集合中的编码格式时，就需要使用到Redis 中的升级策略来解决。流程基本有：</p><ol><li>根据新元素的类型，扩展整数集合底层数组的空间大小，并为新元素分配空间</li><li>将底层数组现有的所有元素都转换成新的编码格式，重新分配空间</li><li>将新元素加入到底层数组中</li></ol><p>&emsp;&emsp;升级策略的实现可以提升整数集合的灵活性，节约内存。</p><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ul><li>整数集合是集合建的底层实现之一</li><li>整数集合的底层实现为数组，这个数组以有序，无重复的范式保存集合元素，在有需要时，程序会根据新添加的元素类型改变这个数组的类型</li><li>升级操作为整数集合带来了操作上的灵活性，并且尽可能地节约了内存</li><li>整数集合只支持升级操作，不支持降级操作</li></ul><h2 id="ZipList：压缩列表"><a href="#ZipList：压缩列表" class="headerlink" title="ZipList：压缩列表"></a>ZipList：压缩列表</h2><p>&emsp;&emsp;压缩列表是列表键和哈希键的底层实现之一。当一个列表键只包含少量列表项，并且每个列表项要么就是小整数，要么就是长度比较短的字符串，那么Redis就会使用压缩列表来做列表键的底层实现。</p><h3 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h3><p>&emsp;&emsp;压缩列表的结构如图所示：</p><p><img src="https://gitee.com/linqiankun/picurl/raw/master/java/%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8%E7%9A%84%E7%BB%93%E6%9E%84.png" alt="压缩列表的结构"></p><ul><li>zlbytes：用于记录整个压缩列表占用的内存字节数</li><li>zltail：记录要列表尾节点距离压缩列表的起始地址有多少字节</li><li>zllen：记录了压缩列表包含的节点数量</li><li>entryX：列表保存的各个节点</li><li>zlend：用于标记压缩列表的末端</li></ul><h3 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h3><ul><li>压缩列表是一种为了节约内存而开发的顺序型数据结构</li><li>压缩列表被用作列表键和哈希键的底层实现之一</li><li>压缩列表可以包含多个节点，每个节点可以保存一个字节数组或者整数值</li><li>添加新节点到压缩列表，可能会引发连锁更新操作</li></ul><hr><h1 id="参考文献-amp-鸣谢"><a href="#参考文献-amp-鸣谢" class="headerlink" title="参考文献 &amp; 鸣谢"></a>参考文献 &amp; 鸣谢</h1><ul><li><a href="https://www.cnblogs.com/jaycekon/p/6227442.html">深入浅出Redis-redis底层数据结构（上）</a></li><li><a href="https://www.cnblogs.com/jaycekon/p/6277653.html">深入浅出Redis-redis底层数据结构（下）</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;redis是用C语言编写的，底层自己设计了一些数据结构，用这些数据结构完成了对外功能的提供。常说的redis可以存储的几种数据结构，底层就是采用这些数据结构实现的。  &lt;/p&gt;</summary>
    
    
    
    <category term="redis" scheme="https://linqiankun.github.io/hexoblog/categories/redis/"/>
    
    
    <category term="数据结构" scheme="https://linqiankun.github.io/hexoblog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="redis" scheme="https://linqiankun.github.io/hexoblog/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>spring中bean的生命周期</title>
    <link href="https://linqiankun.github.io/hexoblog/md/spring/spring%E4%B8%ADbean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://linqiankun.github.io/hexoblog/md/spring/spring%E4%B8%ADbean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2021-07-14T08:01:10.000Z</published>
    <updated>2021-07-16T08:48:10.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>&emsp;&emsp;Spring中Bean的生命周期，大概可以分为四个阶段和多个扩展点：</p><ol><li>实例化</li><li>属性注入</li><li>初始化</li><li>销毁</li></ol><div id="flowchart-0" class="flow-chart"></div><span id="more"></span><hr><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>&emsp;&emsp;生命周期的的主要过程都在doCreate()方法中，在其中顺序的调用实例化，属性赋值，初始化方法。</p><ol><li>createBeanInstance() -&gt; 实例化</li><li>populateBean() -&gt; 属性赋值</li><li>initializeBean() -&gt; 初始化</li></ol><p>&emsp;&emsp;销毁则在容器关闭时调用，详见<code>ConfigurableApplicationContext#close()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 忽略了无关代码</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">doCreateBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> RootBeanDefinition mbd, <span class="keyword">final</span> <span class="meta">@Nullable</span> Object[] args)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Instantiate the bean.</span></span><br><span class="line">   BeanWrapper instanceWrapper = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">if</span> (instanceWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="comment">// 实例化阶段！</span></span><br><span class="line">      instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Initialize the bean instance.</span></span><br><span class="line">   Object exposedObject = bean;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">// 属性赋值阶段！</span></span><br><span class="line">      populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">       <span class="comment">// 初始化阶段！</span></span><br><span class="line">      exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="参考文献-amp-鸣谢"><a href="#参考文献-amp-鸣谢" class="headerlink" title="参考文献 &amp; 鸣谢"></a>参考文献 &amp; 鸣谢</h1><ul><li><a href="https://www.jianshu.com/p/1dec08d290c1">请别再问Spring Bean的生命周期了！</a><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">op1=>operation: 实例化op2=>operation: 属性注入op3=>operation: 初始化op4=>operation: 销毁op1(right)->op2op2(right)->op3op3(right)->op4</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12,"theme":"simple"}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Spring中Bean的生命周期，大概可以分为四个阶段和多个扩展点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实例化&lt;/li&gt;
&lt;li&gt;属性注入&lt;/li&gt;
&lt;li&gt;初始化&lt;/li&gt;
&lt;li&gt;销毁&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&quot;flowchart-0&quot; class=&quot;flow-chart&quot;&gt;&lt;/div&gt;</summary>
    
    
    
    <category term="spring" scheme="https://linqiankun.github.io/hexoblog/categories/spring/"/>
    
    
    <category term="spring" scheme="https://linqiankun.github.io/hexoblog/tags/spring/"/>
    
  </entry>
  
</feed>
